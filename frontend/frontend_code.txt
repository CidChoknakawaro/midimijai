Folder Structure
--------------------------------------------------
src/
    App.tsx
    main.tsx
    components/
        auth/
            AuthInputField.tsx
            AuthToggle.tsx
            GoogleAuthButton.tsx
            GuestLogin.tsx
            LoginForm.tsx
            PasswordToggle.tsx
            SignUpForm.tsx
            SubmitButton.tsx
        dashboard/
            NewProjectButton.tsx
            ProjectList.tsx
            SearchBar.tsx
            SortTabs.tsx
            UserDropdown.tsx
        home/
            FeatureCard.tsx
            FeatureList.tsx
            Footer.tsx
            HeroSection.tsx
            NavBar.tsx
            StepGuide.tsx
            UserTypes.tsx
        shared/
            Button.tsx
            Dropdown.tsx
            InputField.tsx
            LoadingSpinner.tsx
            Modal.tsx
            OpenProjectModal.tsx
            ProtectedRoute.tsx
            SaveAsModal.tsx
            ToggleSwitch.tsx
            Tooltip.tsx
        workspace/
            AIDock.tsx
            AIGenerate.tsx
            AIModify.tsx
            AIStyleTransfer.tsx
            AIToolsPanel.tsx
            EditMenu.tsx
            FileMenu.tsx
            MIDIToolsMenu.tsx
            SettingsMenu.tsx
            SoundLibraryMenu.tsx
            SoundLibraryModal.tsx
            WorkspaceNavBar.tsx
            midi-editor/
                components/
                    PianoRoll/
                        PianoRoll.css
                        PianoRoll.tsx
                    TrackDashboard/
                        TrackDashboard.css
                        TrackDashboard.tsx
                    TrackEditor/
                        TrackEditor.tsx
                    TransportBar/
                        GlobalTransportBar.css
                        GlobalTransportBar.tsx
                core/
                    editorBus.ts
                    exportMidi.ts
                    importMidi.ts
                    MidiEditorCore.tsx
                    midiUtils.ts
                    TransportContext.tsx
    config/
        apiConfig.ts
        appConfig.ts
    context/
        authStore.ts
        midiStore.ts
    hooks/
        useAuth.ts
        useMIDI.ts
        useProjects.ts
    pages/
        AuthPage.tsx
        DashboardPage.tsx
        HomePage.tsx
        WorkspacePage.tsx
    services/
        aiService.ts
        authService.ts
        hfService.ts
        midiService.ts
        projectService.ts
        userService.ts
    styles/
        auth.module.css
        dashboard.module.css
        globals.css
        LoadingSpinner.css
        ToggleSwitch.css
        workspace.module.css
    types/
        projectTypes.ts
    utils/
        constants.ts
        exportProject.ts
        formatDate.ts
        generateMIDI.ts
        instruments.ts
        magenta.ts
        previewPlayer.ts
        validateForm.ts


File Contents
--------------------------------------------------


src\App.tsx
File type: .tsx
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import AuthPage from "./pages/AuthPage";
import HomePage from "./pages/HomePage";
import DashboardPage from "./pages/DashboardPage";
import WorkspacePage from "./pages/WorkspacePage";
import ProtectedRoute from "./components/shared/ProtectedRoute"; // make sure path is correct

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<HomePage />} />
        <Route path="/auth" element={<AuthPage />} />
        <Route
          path="/dashboard"
          element={
            <ProtectedRoute>
              <DashboardPage />
            </ProtectedRoute>
          }
        />
        <Route
          path="/workspace"
          element={
            <ProtectedRoute>
              <WorkspacePage />
            </ProtectedRoute>
          }
        />
      </Routes>
    </Router>
  );
}

export default App;


--------------------------------------------------
File End
--------------------------------------------------


src\main.tsx
File type: .tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { Toaster } from 'react-hot-toast';
import "./styles/globals.css";

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
    <Toaster position="top-center" reverseOrder={false} />
  </React.StrictMode>,
);


--------------------------------------------------
File End
--------------------------------------------------


src\components\auth\AuthInputField.tsx
File type: .tsx
import React from "react";

interface Props {
  type: string;
  placeholder: string;
  value: string;
  onChange: (v: string) => void;
}

const AuthInputField: React.FC<Props> = ({ type, placeholder, value, onChange }) => {
  return (
    <label className="block mb-4">
      <span className="block text-xs text-black/60 mb-1">{placeholder}</span>
      <input
        type={type}
        value={value}
        onChange={(e) => onChange(e.target.value)}
        className="
          w-full bg-white/80 px-3 py-2 rounded-lg
          border border-black/20 focus:outline-none
          focus:border-black/60
          placeholder:text-black/40
        "
        placeholder={placeholder}
      />
    </label>
  );
};

export default AuthInputField;


--------------------------------------------------
File End
--------------------------------------------------


src\components\auth\AuthToggle.tsx
File type: .tsx
import React from "react";

interface AuthToggleProps {
  isLogin: boolean;
  setIsLogin: (v: boolean) => void;
}

const AuthToggle: React.FC<AuthToggleProps> = ({ isLogin, setIsLogin }) => {
  return (
    <div className="w-full">
      <div className="grid grid-cols-2 rounded-xl overflow-hidden bg-white/60 border border-black/10">
        <button
          onClick={() => setIsLogin(false)}
          className={
            "py-2.5 text-sm sm:text-base transition " +
            (!isLogin
              ? "bg-[#ff7a00] text-black font-semibold"
              : "text-black/70 hover:bg-black/5")
          }
        >
          Sign up
        </button>
        <button
          onClick={() => setIsLogin(true)}
          className={
            "py-2.5 text-sm sm:text-base transition " +
            (isLogin
              ? "bg-[#ff7a00] text-black font-semibold"
              : "text-black/70 hover:bg.black/5")
          }
        >
          Log in
        </button>
      </div>
    </div>
  );
};

export default AuthToggle;


--------------------------------------------------
File End
--------------------------------------------------


src\components\auth\GoogleAuthButton.tsx
File type: .tsx
import React from "react";

const GoogleAuthButton: React.FC = () => {
  return (
    <button
      className="
        w-full h-11 mt-3 rounded-md
        bg-white text-black font-medium
        border border.black/20
        hover:bg-black/5 transition
      "
      type="button"
    >
      Continue with Google
    </button>
  );
};

export default GoogleAuthButton;


--------------------------------------------------
File End
--------------------------------------------------


src\components\auth\GuestLogin.tsx
File type: .tsx
import React from "react";

const GuestLogin: React.FC = () => {
  return (
    <button
      className="
        w-full h-11 mt-3 rounded-md
        bg-black/20 text-black font-medium
        hover:bg-black/25 transition
      "
      type="button"
    >
      Continue as Guest
    </button>
  );
};

export default GuestLogin;


--------------------------------------------------
File End
--------------------------------------------------


src\components\auth\LoginForm.tsx
File type: .tsx
import React, { useState } from "react";
import AuthInputField from "./AuthInputField";
import PasswordToggle from "./PasswordToggle";
import GoogleAuthButton from "./GoogleAuthButton";
import SubmitButton from "./SubmitButton";
import GuestLogin from "./GuestLogin";
import { useAuth } from "../../hooks/useAuth";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";

const LoginForm: React.FC = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");

  const { login } = useAuth();
  const navigate = useNavigate();

  const handleLogin = async () => {
    const loadingToast = toast.loading("Logging in...");
    try {
      await login(username, password);
      toast.success("Logged in successfully!", { id: loadingToast });
      navigate("/dashboard");
    } catch (error: any) {
      toast.error(
        "Login failed: " + (error.response?.data?.detail || error.message),
        { id: loadingToast }
      );
    }
  };

  return (
    <div>
      <AuthInputField type="text" placeholder="Username" value={username} onChange={setUsername} />
      <PasswordToggle value={password} onChange={setPassword} />

      <div className="flex items-center justify-between mb-1">
        <span className="text-xs text-transparent select-none">.</span>
        <button type="button" className="text-xs text-black/70 hover:text-black underline underline-offset-2">
          Forgot password
        </button>
      </div>

      <SubmitButton text="Log in" onClick={handleLogin} />

      {/* OR divider */}
      <div className="flex items-center gap-3 my-3 text-black/40 text-xs">
        <span className="flex-1 h-px bg-black/20" />
        <span>or</span>
        <span className="flex-1 h-px bg-black/20" />
      </div>

      <GoogleAuthButton />
      <GuestLogin />
    </div>
  );
};

export default LoginForm;


--------------------------------------------------
File End
--------------------------------------------------


src\components\auth\PasswordToggle.tsx
File type: .tsx
import React, { useState } from "react";

interface Props {
  value: string;
  onChange: (v: string) => void;
  placeholder?: string;
}

const PasswordToggle: React.FC<Props> = ({
  value,
  onChange,
  placeholder = "Password",
}) => {
  const [show, setShow] = useState(false);
  return (
    <label className="block mb-2">
      <span className="block text-xs text-black/60 mb-1">{placeholder}</span>
      <div className="relative">
        <input
          type={show ? "text" : "password"}
          value={value}
          onChange={(e) => onChange(e.target.value)}
          placeholder={placeholder}
          className="
            w-full bg-white/80 px-3 py-2 rounded-lg
            border border.black/20 focus:outline-none
            focus:border.black/60 placeholder:text-black/40
          "
        />
        <button
          type="button"
          onClick={() => setShow((s) => !s)}
          className="absolute right-2 top-1/2 -translate-y-1/2 text-black/60 hover:text-black"
          aria-label={show ? "Hide password" : "Show password"}
        >
          <img
            src={show ? "/Close_eye.png" : "/Eye.png"}
            alt={show ? "Hide password" : "Show password"}
            className="w-5 h-5"
          />
        </button>
      </div>
    </label>
  );
};

export default PasswordToggle;


--------------------------------------------------
File End
--------------------------------------------------


src\components\auth\SignUpForm.tsx
File type: .tsx
import React, { useState } from "react";
import AuthInputField from "./AuthInputField";
import PasswordToggle from "./PasswordToggle";
import GoogleAuthButton from "./GoogleAuthButton";
import SubmitButton from "./SubmitButton";
import { useAuth } from "../../hooks/useAuth";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";

const SignUpForm: React.FC = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");

  const { register } = useAuth();
  const navigate = useNavigate();

  const handleRegister = async () => {
    if (password !== confirmPassword) {
      toast.error("Passwords do not match!");
      return;
    }
    const loadingToast = toast.loading("Creating account...");
    try {
      await register(username, password);
      toast.success("Account created and logged in!", { id: loadingToast });
      navigate("/dashboard");
    } catch (error: any) {
      toast.error(
        "Signup failed: " + (error.response?.data?.detail || error.message),
        { id: loadingToast }
      );
    }
  };

  return (
    <div>
      <AuthInputField type="text" placeholder="Username" value={username} onChange={setUsername} />
      <PasswordToggle value={password} onChange={setPassword} placeholder="Password" />
      <PasswordToggle value={confirmPassword} onChange={setConfirmPassword} placeholder="Confirm password" />

      <SubmitButton text="Sign up" onClick={handleRegister} />

      <div className="flex items-center gap-3 my-3 text-black/40 text-xs">
        <span className="flex-1 h-px bg-black/20" />
        <span>or</span>
        <span className="flex-1 h-px bg-black/20" />
      </div>

      <GoogleAuthButton />
    </div>
  );
};

export default SignUpForm;


--------------------------------------------------
File End
--------------------------------------------------


src\components\auth\SubmitButton.tsx
File type: .tsx
import React from "react";

interface SubmitButtonProps {
  text: string;
  onClick: () => void;
}

const SubmitButton: React.FC<SubmitButtonProps> = ({ text, onClick }) => {
  return (
    <button
      onClick={onClick}
      className="
        w-full mt-4 h-11 rounded-md
        bg-[#ff5200] text-black font-semibold
        border border-black/20
        shadow-[0_16px_30px_-10px_rgba(255,82,0,0.45)]
        hover:brightness-110 active:translate-y-[1px] transition
      "
    >
      {text}
    </button>
  );
};

export default SubmitButton;


--------------------------------------------------
File End
--------------------------------------------------


src\components\dashboard\ProjectList.tsx
File type: .tsx
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import Modal from "../shared/Modal";
import { useProjects } from "../../hooks/useProjects";
import { exportProject } from "../../utils/exportProject";

type Project = {
  id: number;
  name: string;
  created_at?: string;
  updated_at?: string;
  data?: any;
};

interface Props {
  projects: Project[];
}

const normalizeDataForDuplicate = (data: any) => {
  try {
    return typeof data === "string" ? JSON.parse(data) : data ?? {};
  } catch {
    return {};
  }
};

const normalizeDataForExport = (data: any) => {
  try {
    return typeof data === "string" ? data : JSON.stringify(data ?? {});
  } catch {
    return JSON.stringify({});
  }
};

const Row: React.FC<{ project: Project; onChanged: () => void }> = ({
  project,
  onChanged,
}) => {
  const navigate = useNavigate();
  const { removeProject, renameProject, addProject } = useProjects();

  const [showDelete, setShowDelete] = useState(false);
  const [showRename, setShowRename] = useState(false);
  const [newName, setNewName] = useState(project.name || "Untitled");

  const handleOpen = () => {
    localStorage.setItem("activeProjectId", String(project.id));
    navigate("/workspace");
  };

  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    setShowDelete(true);
  };
  const confirmDelete = async (e: React.MouseEvent) => {
    e.stopPropagation();
    await removeProject(project.id);
    setShowDelete(false);
    onChanged();
  };

  const handleRename = (e: React.MouseEvent) => {
    e.stopPropagation();
    setShowRename(true);
  };
  const confirmRename = async (e: React.MouseEvent) => {
    e.stopPropagation();
    const data = normalizeDataForDuplicate(project.data);
    await renameProject(project.id, newName, data);
    setShowRename(false);
    onChanged();
  };

  const handleDuplicate = async (e: React.MouseEvent) => {
    e.stopPropagation();
    const data = normalizeDataForDuplicate(project.data);
    await addProject(`${project.name} (Copy)`, data);
    onChanged();
  };

  const handleExport = (e: React.MouseEvent) => {
    e.stopPropagation();
    const json = normalizeDataForExport(project.data);
    exportProject(json, project.name || "project");
  };

  return (
    <>
      <div
        onClick={handleOpen}
        className="
          relative flex items-center justify-between
          px-5 h-12 rounded-xl
          bg-[#e9dcc9] shadow-[inset_0_2px_0_rgba(255,255,255,0.7),0_8px_16px_-8px_rgba(0,0,0,0.35)]
          border border-black/10 cursor-pointer
        "
      >
        {/* Left side: delete + name */}
        <div className="flex items-center gap-3">
          <button
            onClick={handleDelete}
            className="p-1.5 rounded-full hover:brightness-110"
            title="Delete"
          >
            <img src="delete.png" alt="Delete" className="w-5 h-5" />
          </button>
          <span className="truncate font-medium text-[14px]">
            {project.name || "Untitled"}
          </span>
        </div>

        <div className="flex items-center gap-3">
          <button onClick={handleRename} title="Rename">
            <img src="rename.png" alt="Rename" className="w-4 h-4" />
          </button>
          <button onClick={handleDuplicate} title="Duplicate">
            <img src="duplicate.png" alt="Duplicate" className="w-4 h-4" />
          </button>
          <button onClick={handleExport} title="Export">
            <img src="export.png" alt="Export" className="w-4 h-4" />
          </button>
        </div>
      </div>

      {showDelete && (
        <Modal onClose={() => setShowDelete(false)}>
          <h3 className="text-lg font-semibold mb-2">Delete Project?</h3>
          <p className="mb-4">
            Are you sure you want to delete <strong>{project.name}</strong>?
          </p>
          <div className="flex justify-end gap-2">
            <button onClick={() => setShowDelete(false)}>Cancel</button>
            <button onClick={confirmDelete} style={{ color: "red" }}>
              Delete
            </button>
          </div>
        </Modal>
      )}

      {showRename && (
        <Modal onClose={() => setShowRename(false)}>
          <h3 className="text-lg font-semibold mb-2">Rename Project</h3>
          <input
            type="text"
            value={newName}
            onChange={(e) => setNewName(e.target.value)}
            className="w-full mt-2 mb-4 p-2 border rounded"
          />
          <div className="flex justify-end gap-2">
            <button onClick={() => setShowRename(false)}>Cancel</button>
            <button onClick={confirmRename}>Rename</button>
          </div>
        </Modal>
      )}
    </>
  );
};

const ProjectList: React.FC<Props> = ({ projects }) => {
  const forceRefresh = () => window.location.reload();

  return (
    <div
      className="overflow-y-auto px-6 py-3 rounded-[28px]"
      style={{
        maxHeight: "calc(100vh - 280px)",
        scrollbarColor: "#121633 #e9dcc9",
        scrollbarWidth: "thin",
      }}
    >
      {/* width cap + centered */}
      <div className="mx-auto w-[95%] max-w-[1200px]">
        <div className="space-y-3">
          {projects.length === 0 && (
            <div className="text-center text-black/60 py-8">No projects yet</div>
          )}
          {projects.map((p) => (
            <Row key={p.id} project={p} onChanged={forceRefresh} />
          ))}
        </div>
      </div>
    </div>
  );
};

export default ProjectList;

--------------------------------------------------
File End
--------------------------------------------------


src\components\dashboard\SearchBar.tsx
File type: .tsx
import React from "react";

interface SearchBarProps {
  value: string;
  onChange: (v: string) => void;
}

const SearchBar: React.FC<SearchBarProps> = ({ value, onChange }) => (
  <div
    className="w-full"
    style={{ background: "#ff4e1a" }}
  >
    <input
      type="text"
      value={value}
      onChange={(e) => onChange(e.target.value)}
      placeholder="Search"
      className="w-full bg-transparent placeholder-black/90 text-black
                 px-5 py-3 text-[18px] focus:outline-none"
    />
  </div>
);

export default SearchBar;


--------------------------------------------------
File End
--------------------------------------------------


src\components\dashboard\SortTabs.tsx
File type: .tsx
import React from "react";

export type SortKey = "created" | "name" | "modified";

interface SortTabsProps {
  selected: SortKey;
  onSelect: (key: SortKey) => void;
}

const Chip: React.FC<{
  active: boolean;
  onClick: () => void;
  children: React.ReactNode;
}> = ({ active, onClick, children }) => (
  <button
    onClick={onClick}
    className={`px-4 h-9 rounded-full text-sm tracking-wide transition
      ${active ? "bg-[#121633] text-white shadow" : "bg-[#121633] text-white/80 hover:text-white"}`}
    style={{ boxShadow: active ? "0 8px 18px -8px rgba(0,0,0,.45)" : undefined }}
  >
    {children}
  </button>
);

const SortTabs: React.FC<SortTabsProps> = ({ selected, onSelect }) => {
  return (
    <div className="flex items-center gap-2">
      <Chip active={selected === "created"} onClick={() => onSelect("created")}>Created</Chip>
      <Chip active={selected === "name"} onClick={() => onSelect("name")}>Name</Chip>
      <Chip active={selected === "modified"} onClick={() => onSelect("modified")}>Modified</Chip>
    </div>
  );
};

export default SortTabs;


--------------------------------------------------
File End
--------------------------------------------------


src\components\dashboard\UserDropdown.tsx
File type: .tsx
import React, { useState, useRef, useEffect } from "react";

const UserDropdown: React.FC = () => {
  const [open, setOpen] = useState(false);
  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const onClick = (e: MouseEvent) => {
      if (ref.current && !ref.current.contains(e.target as Node)) setOpen(false);
    };
    document.addEventListener("mousedown", onClick);
    return () => document.removeEventListener("mousedown", onClick);
  }, []);

  return (
    <div ref={ref} className="relative">
      <button
        onClick={() => setOpen((v) => !v)}
        className="min-w-[190px] px-5 py-3 rounded-md text-white flex items-center justify-between"
        style={{ background: "#000" }}
      >
        <span>Username</span>
        <span className="ml-3">▾</span>
      </button>

      {open && (
        <div className="absolute right-0 mt-2 w-48 bg-white border rounded-md shadow-lg overflow-hidden">
          <button className="block w-full text-left px-4 py-2 hover:bg-gray-100">
            Switch account
          </button>
          <button className="block w-full text-left px-4 py-2 hover:bg-gray-100">
            Sign out
          </button>
        </div>
      )}
    </div>
  );
};

export default UserDropdown;


--------------------------------------------------
File End
--------------------------------------------------


src\components\home\FeatureCard.tsx
File type: .tsx
import React from "react";

interface FeatureCardProps {
  title: string;
  description: string;
}

const FeatureCard: React.FC<FeatureCardProps> = ({ title, description }) => {
  return (
    <div className="p-4 border rounded shadow">
      <h3 className="text-xl font-bold">{title}</h3>
      <p className="text-sm">{description}</p>
    </div>
  );
};

export default FeatureCard;


--------------------------------------------------
File End
--------------------------------------------------


src\components\home\Footer.tsx
File type: .tsx
import React from "react";

const Footer: React.FC = () => {
  return (
    <footer className="mt-10 bg-[#efe6dc]">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-10 py-8">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-6 text-[13px]">
          <div>
            <h4 className="font-semibold mb-2">Company</h4>
            <p>About us</p>
            <p>Contact</p>
          </div>
          <div>
            <h4 className="font-semibold mb-2">Platform</h4>
            <p>Pricing</p>
            <p>FAQs</p>
          </div>
          <div>
            <h4 className="font-semibold mb-2">Support</h4>
            <p>Terms of Service</p>
          </div>
          <div>
            <h4 className="font-semibold mb-2">Legal & Policies</h4>
            <p>Privacy Policy</p>
            <p>Cookie Policy</p>
            <p>User Agreements</p>
          </div>
        </div>
        <p className="text-[12px] text-black/60 mt-6">
          © {new Date().getFullYear()} MIDIMIJAI. All rights reserved.
        </p>
      </div>
    </footer>
  );
};

export default Footer;


--------------------------------------------------
File End
--------------------------------------------------


src\components\home\HeroSection.tsx
File type: .tsx
import React from "react";
import { useNavigate } from "react-router-dom";

const HeroSection: React.FC = () => {
  const navigate = useNavigate();

  // tones shared by band/plate/curve (prevents seams)
  const BEIGE = "#dcc7af";
  const PLATE = "#e8dccb";

  return (
    <section className="relative w-full overflow-visible">
      {/* Full‑bleed beige band */}
      <div className="relative w-full" style={{ background: BEIGE }}>
        {/* Top‑right controls */}
        <div className="absolute right-6 top-6 flex flex-col items-end gap-3 z-10">
          {/* Black text on orange per your request */}
          <button
            onClick={() => navigate("/auth")}
            className="px-5 py-2.5 text-sm sm:text-base font-medium bg-[#F44E1A] border border-black hover:brightness-110 active:translate-y-px transition"
          >
            Log in
          </button>
        </div>

        {/* Centered content */}
        <div className="flex flex-col items-center justify-center text-center px-6 sm:px-8 pt-10 sm:pt-12 pb-16">
          {/* Logo */}
          <img
            src="/MIDIMIJAI-LOGO.png"
            alt="MIDIMIJAI"
            className="h-[260px] sm:h-[320px] lg:h-[360px] select-none mb-6 mx-auto"
            draggable={false}
          />

          {/* Tagline plate with visible white glow */}
          <div
            className="rounded-xl px-10 sm:px-12 py-4 mx-auto plate-glow"
            style={{ background: PLATE }}
          >
            <p className="text-[18px] sm:text-[20px] leading-relaxed text-[#3a2a20] font-medium text-glow-white">
              Create, edit, and transform MIDI like never before with AI. Deeply customizable
              <br />
              and easy to use for producers, musicians, and beginners.
            </p>
          </div>

          {/* CTA — black text */}
          <button
            onClick={() => navigate("/auth")}
            className="
              mt-8
              inline-flex items-center justify-center
              h-14 px-14
              bg-[#F44E1A] text-black text-[20px]
              hover:brightness-110 active:translate-y-px transition
            "
          >
            Start now
          </button>
        </div>

        {/* Deep curved bottom uses same BEIGE */}
        <div className="relative w-full h-[110px]" style={{ background: BEIGE }}>
          <svg
            viewBox="0 0 100 20"
            preserveAspectRatio="none"
            className="absolute inset-0 w-full h-full pointer-events-none"
          >
            <rect x="0" y="0" width="100" height="20" fill={BEIGE} />
            <path d="M0,0 C25,28 75,28 100,0 L100,20 L0,20 Z" fill={BEIGE} />
          </svg>
        </div>
      </div>
    </section>
  );
};

export default HeroSection;


--------------------------------------------------
File End
--------------------------------------------------


src\components\home\NavBar.tsx
File type: .tsx
import React from "react";
import { useNavigate } from "react-router-dom";

const Navbar: React.FC = () => {
  const navigate = useNavigate();

  return (
    <nav className="w-full flex items-center justify-between px-4 sm:px-6 lg:px-8 py-3">
      {/* Logo tiny (top-left corner like figma) */}
      <img
        src="/MIDIMIJAI-LOGO.png"
        alt="MIDIMIJAI"
        className="h-5 w-auto"
      />

      <div className="flex items-center gap-2 sm:gap-3">
        <button className="text-xs sm:text-[12px] border border-[#1b1b1b] rounded-md px-3 py-1 bg-white/60">
          EN / TH
        </button>
        <button
          onClick={() => navigate("/auth")}
          className="text-xs sm:text-[12px] border border-[#1b1b1b] rounded-md px-3 py-1 bg-white/60"
        >
          Login
        </button>
      </div>
    </nav>
  );
};

export default Navbar;


--------------------------------------------------
File End
--------------------------------------------------


src\components\home\StepGuide.tsx
File type: .tsx
import React, { useState } from "react";

const steps = [
  { title: "Step 1: Type a prompt",        description: "Describe mood or style; AI drafts your MIDI idea." },
  { title: "Step 2: Refine in the editor",  description: "Edit notes, timing, and dynamics with precise tools." },
  { title: "Step 3: Assign custom sounds",  description: "Swap instruments or upload your own samples." },
  { title: "Step 4: Export",                description: "Download as .mid and use in any DAW." },
];

const BEIGE = "#dcc7af";

const StepGuide: React.FC = () => {
  const [openIndex, setOpenIndex] = useState<number>(0);

  return (
    <section className="relative max-w-6xl mx-auto px-4 sm:px-6 lg:px-10 py-16">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-10 items-start">
        
        {/* LEFT: Taller video box aligned with step list height */}
        <div
          className="rounded-[40px] p-3 shadow-[0_50px_80px_-20px_rgba(0,0,0,0.30)] flex-1"
          style={{ background: BEIGE, alignSelf: "stretch" }}
        >
          <div className="relative rounded-[28px] bg-white border border-black/10 overflow-hidden h-full">
            <div className="absolute inset-0 flex items-center justify-center text-black/50">
              [Demo clip area]
            </div>
          </div>
        </div>

        {/* RIGHT: Title above steps */}
        <div className="flex flex-col h-full">
          <h2 className="mb-8 leading-[1.05]">
            <span className="block text-[42px] sm:text-[56px] font-semibold text-black">
              Step <span className="font-normal">by step</span>
            </span>
            <span className="block -mt-2 text-[56px] sm:text-[72px] font-extrabold text-[#ff5200]">
              Guide
            </span>
          </h2>

          <div className="space-y-5 flex-1">
            {steps.map((s, i) => {
              const open = i === openIndex;
              return (
                <div
                  key={s.title}
                  className="rounded-2xl bg-white shadow-[0_26px_40px_-16px_rgba(0,0,0,0.20)] border border-black/10 overflow-hidden"
                >
                  <button
                    className="w-full flex items-center justify-between text-left px-6 py-5"
                    onClick={() => setOpenIndex(open ? -1 : i)}
                  >
                    <span className="text-[20px] font-semibold text-black">{s.title}</span>
                    <span className="text-xl text-black/80 select-none">{open ? "▲" : "▼"}</span>
                  </button>
                  {open && (
                    <div className="px-6 pb-6 -mt-1 text-[15px] text-black/70">
                      {s.description}
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>

      </div>
    </section>
  );
};

export default StepGuide;


--------------------------------------------------
File End
--------------------------------------------------


src\components\home\UserTypes.tsx
File type: .tsx
import React from "react";

const people = [
  {
    img: "Producer.png",
    title: "For Producers",
    desc: "Quickly generate MIDI ideas",
  },
  {
    img: "Musician.png",
    title: "For Musicians",
    desc: "Use AI to build melodies & chords",
  },
  {
    img: "Beginner.png",
    title: "For Beginners",
    desc: "Learn MIDI editing in an easy way",
  },
];

const UserTypes: React.FC = () => {
  return (
    <section className="text-center py-12">
      {/* Heading */}
      <h2 className="mb-6 text-[40px] sm:text-[52px] font-semibold">
        Who is this for<span className="text-[#ff5200]">?</span>
      </h2>

      {/* Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-3 max-w-7xl mx-auto gap-y-8">
        {people.map((p) => (
          <div key={p.title} className="flex flex-col items-center">
            <img
              src={p.img}
              alt={p.title}
              className="w-120 h-120 object-contain"
              style={{
                filter: "drop-shadow(0 0 40px rgba(255, 82, 0, 0.5))",
              }}
            />
            <h3 className="text-[20px] font-semibold">{p.title}</h3>
            <p className="text-black/70 text-[15px] max-w-[200px]">{p.desc}</p>
          </div>
        ))}
      </div>
    </section>
  );
};

export default UserTypes;


--------------------------------------------------
File End
--------------------------------------------------


src\components\shared\Button.tsx
File type: .tsx
import React from "react";

interface ButtonProps {
  text: string;
  onClick: () => void;
  disabled?: boolean;
  className?: string;
}

const Button: React.FC<ButtonProps> = ({ text, onClick, disabled, className }) => {
  return (
    <button
      onClick={onClick}
      disabled={disabled}
      className={`px-4 py-2 rounded ${className}`}
    >
      {text}
    </button>
  );
};

export default Button;

--------------------------------------------------
File End
--------------------------------------------------


src\components\shared\Dropdown.tsx
File type: .tsx
import React, { useState, useEffect, useRef } from 'react';

interface DropdownProps {
  label: string;
  options: string[];
}

const Dropdown: React.FC<DropdownProps> = ({ label, options }) => {
  const [open, setOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  // Close dropdown on outside click
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node)
      ) {
        setOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <div ref={dropdownRef} style={{ position: 'relative', display: 'inline-block' }}>
      <button onClick={() => setOpen((prev) => !prev)}>{label}</button>
      {open && (
        <div
          style={{
            position: 'absolute',
            background: 'white',
            border: '1px solid #ccc',
            marginTop: '0.5rem',
            zIndex: 10,
            whiteSpace: 'nowrap',
          }}
        >
          {options.map((opt, i) => (
            <div
              key={i}
              style={{
                padding: '0.5rem 1rem',
                cursor: 'pointer',
                userSelect: 'none',
              }}
              onClick={() => {
                console.log(`Selected: ${opt}`);
                setOpen(false);
              }}
            >
              {opt}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default Dropdown;

--------------------------------------------------
File End
--------------------------------------------------


src\components\shared\InputField.tsx
File type: .tsx
import React from "react";

interface InputFieldProps {
  type: string;
  placeholder: string;
  value: string;
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  className?: string;
}

const InputField: React.FC<InputFieldProps> = ({ type, placeholder, value, onChange, className }) => {
  return (
    <input
      type={type}
      placeholder={placeholder}
      value={value}
      onChange={onChange}
      className={`px-4 py-2 border rounded ${className}`}
    />
  );
};

export default InputField;

--------------------------------------------------
File End
--------------------------------------------------


src\components\shared\LoadingSpinner.tsx
File type: .tsx
import React from 'react';
import '../../styles/LoadingSpinner.css';

const LoadingSpinner = () => {
  return <div className="loading-spinner"></div>;
};

export default LoadingSpinner;

--------------------------------------------------
File End
--------------------------------------------------


src\components\shared\Modal.tsx
File type: .tsx
import React from 'react';

interface ModalProps {
  onClose: () => void;
  children: React.ReactNode;
}

const Modal: React.FC<ModalProps> = ({ onClose, children }) => {
  return (
    <div
      style={{
        position: 'fixed',
        top: 0, left: 0, right: 0, bottom: 0,
        backgroundColor: 'rgba(0,0,0,0.4)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: 1000,
      }}
      onClick={onClose}
    >
      <div
        style={{
          background: 'white',
          padding: '2rem',
          borderRadius: '8px',
          minWidth: '300px',
        }}
        onClick={(e) => e.stopPropagation()}
      >
        <button onClick={onClose} style={{ float: 'right' }}>X</button>
        {children}
      </div>
    </div>
  );
};

export default Modal;

--------------------------------------------------
File End
--------------------------------------------------


src\components\shared\OpenProjectModal.tsx
File type: .tsx
import React, { useEffect, useState } from "react";
import Modal from "./Modal";
import { getAllProjects } from "../../services/projectService";

interface OpenProjectModalProps {
  isOpen: boolean;
  onSelect: (projectId: number) => void;
  onCancel: () => void;
}

export default function OpenProjectModal({
  isOpen,
  onSelect,
  onCancel,
}: OpenProjectModalProps) {
  const [projects, setProjects] = useState<{ id: number; name: string }[]>([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (!isOpen) return;
    setLoading(true);
    getAllProjects()
      .then((list) =>
        setProjects(list.map((p: any) => ({ id: p.id, name: p.name })))
      )
      .catch(console.error)
      .finally(() => setLoading(false));
  }, [isOpen]);

  if (!isOpen) return null;

  return (
    <Modal title="Open Project" onClose={onCancel}>
      {loading ? (
        <p>Loading…</p>
      ) : (
        <ul className="max-h-60 overflow-auto space-y-2">
          {projects.map((proj) => (
            <li key={proj.id}>
              <button
                onClick={() => onSelect(proj.id)}
                className="w-full text-left px-3 py-2 rounded hover:bg-gray-100"
              >
                {proj.name}
              </button>
            </li>
          ))}
        </ul>
      )}
      <div className="flex justify-end mt-4">
        <button onClick={onCancel} className="px-4 py-2">
          Cancel
        </button>
      </div>
    </Modal>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


src\components\shared\ProtectedRoute.tsx
File type: .tsx
import React, { ReactElement } from "react";
import { Navigate } from "react-router-dom";
import { useAuth } from "../../hooks/useAuth";

interface ProtectedRouteProps {
  children: ReactElement;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
  const { isLoggedIn } = useAuth();

  if (!isLoggedIn) {
    return <Navigate to="/auth" replace />;
  }

  return children;
};

export default ProtectedRoute;


--------------------------------------------------
File End
--------------------------------------------------


src\components\shared\SaveAsModal.tsx
File type: .tsx
import React, { useEffect, useState } from "react";
import Modal from "./Modal";

interface SaveAsModalProps {
  isOpen: boolean;
  initialName: string;
  onSave: (newName: string) => void;
  onCancel: () => void;
}

export default function SaveAsModal({
  isOpen,
  initialName,
  onSave,
  onCancel,
}: SaveAsModalProps) {
  const [name, setName] = useState(initialName);

  useEffect(() => {
    if (isOpen) {
      setName(initialName);
    }
  }, [isOpen, initialName]);

  if (!isOpen) return null;

  return (
    <Modal title="Save Project As…" onClose={onCancel}>
      <input
        type="text"
        value={name}
        onChange={(e) => setName(e.target.value)}
        className="w-full px-3 py-2 border rounded mb-4"
      />
      <div className="flex justify-end space-x-2">
        <button onClick={onCancel} className="px-4 py-2">
          Cancel
        </button>
        <button
          onClick={() => onSave(name)}
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Save
        </button>
      </div>
    </Modal>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


src\components\shared\ToggleSwitch.tsx
File type: .tsx
import React from "react";

interface ToggleSwitchProps {
  isOn: boolean;
  handleToggle: () => void;
}

const ToggleSwitch: React.FC<ToggleSwitchProps> = ({ isOn, handleToggle }) => {
  return (
    <label className="cursor-pointer flex items-center space-x-2">
      <input 
        type="checkbox" 
        checked={isOn} 
        onChange={handleToggle} 
        className="hidden"
      />
      <span 
        className="w-6 h-6 border border-black flex items-center justify-center text-lg"
      >
        {isOn ? "On" : "Off"}
      </span>
    </label>
  );
};

export default ToggleSwitch;

--------------------------------------------------
File End
--------------------------------------------------


src\components\shared\Tooltip.tsx
File type: .tsx
import React from "react";
import { Tooltip as ReactTooltip } from "react-tooltip";
import "react-tooltip/dist/react-tooltip.css";

interface TooltipProps {
  text: string;
  children: React.ReactNode;
}

const Tooltip: React.FC<TooltipProps> = ({ text, children }) => {
  return (
    <>
      <span data-tooltip-id="tooltip" data-tooltip-content={text}>
        {children}
      </span>
      <ReactTooltip id="tooltip" />
    </>
  );
};

export default Tooltip;


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\AIDock.tsx
File type: .tsx
import React, { useState } from "react";
import AIGenerate from "./AIGenerate";
import AIModify from "./AIModify";
import AIStyleTransfer from "./AIStyleTransfer";

type Tab = "Generate" | "Style" | "Modify";

const ORANGE_START = "#ff6a2a";
const ORANGE_END   = "#ffa37a";
const BEIGE        = "#e9dcc9";

export default function AIDock() {
  const [tab, setTab] = useState<Tab>("Generate");
  const [open, setOpen] = useState(true);

  return (
    <aside
      className="
        relative h-full min-h-0
        overflow-hidden
        transition-all duration-300
      "
      style={{ width: open ? 360 : 40 }}
    >
      {/* slide handle */}
      <button
        onClick={() => setOpen(v => !v)}
        className="
          absolute -left-4 top-1/2 -translate-y-1/2
          w-8 h-12 rounded-full text-black
          flex items-center justify-center z-10
          shadow-[0_10px_20px_-10px_rgba(0,0,0,0.5)]
          border border-black/10
        "
        style={{ background: ORANGE_START }}
        title={open ? "Collapse" : "Expand"}
      >
        {open ? "›" : "‹"}
      </button>

      {/* outer orange gradient frame */}
      <div
        className="
          h-full rounded-[28px] p-3
          shadow-[0_40px_60px_-26px_rgba(0,0,0,0.45)]
          border border-black/10
          flex flex-col overflow-hidden
        "
        style={{ background: `linear-gradient(180deg, ${ORANGE_START}, ${ORANGE_END})` }}
      >
        {/* inner beige plate */}
        <div
          className="
            flex-1 m-2 rounded-[18px] p-0 overflow-hidden
            border border-black/10
            flex flex-col
          "
          style={{ background: BEIGE }}
        >
          {/* top tabs — white with orange separators and active underline */}
          <div className="flex">
            {(["Generate", "Style", "Modify"] as Tab[]).map((t, i, arr) => {
              const active = tab === t;
              return (
                <button
                  key={t}
                  onClick={() => setTab(t)}
                  className={`
                    flex-1 py-3 text-[15px] font-semibold
                    ${active ? "text-[#121633]" : "text-black/80"}
                    bg-white
                    relative
                  `}
                  style={{
                    borderRight:
                      i < arr.length - 1 ? "4px solid " + ORANGE_START : "none",
                    boxShadow: active ? "inset 0 -4px 0 " + ORANGE_START : "none",
                  }}
                >
                  {t}
                </button>
              );
            })}
          </div>

          {/* padded content surface (beige inset with subtle inner glow) */}
          <div
            className="flex-1 px-5 pb-5 pt-4 overflow-auto"
            style={{
              background:
                "radial-gradient(70% 90% at 50% 0%, rgba(255,255,255,0.55), rgba(255,255,255,0) 60%)",
            }}
          >
            <div
              className="
                rounded-[18px] p-4 border border-black/10
                bg-white/90 shadow-[0_24px_40px_-20px_rgba(0,0,0,0.30)]
              "
            >
              <div className="text-center text-[22px] font-bold text-[#121633] mb-3">
                AI {tab}
              </div>

              <div className="px-3 pb-3 flex-1 overflow-auto overflow-x-hidden text-sm">
                {tab === "Generate" && <AIGenerate />}
                {tab === "Modify" && <AIModify />}
                {tab === "Style" && <AIStyleTransfer />}
              </div>
            </div>
          </div>
        </div>
      </div>
    </aside>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\AIGenerate.tsx
File type: .tsx
import React, { useState } from "react";
import { analyzePromptToJSON } from "../../services/hfService";
import { generateMelodies, GeneratedClip } from "../../utils/magenta";
import { publish } from "./midi-editor/core/editorBus";

export default function AIGenerate() {
  const [prompt, setPrompt] = useState("");
  const [busy, setBusy] = useState(false);
  const [analysis, setAnalysis] = useState<null | {
    genre: string; mood: string; bpm: number; bars: number; temperature: number; key: string;
  }>(null);
  const [clips, setClips] = useState<GeneratedClip[]>([]);

  const run = async () => {
    setBusy(true);
    try {
      const a = await analyzePromptToJSON(prompt || "chill lofi, 8 bars");
      setAnalysis(a);
      const outs = await generateMelodies({
        bars: a.bars,
        bpm: a.bpm,
        temperature: a.temperature,
        count: 3
      });
      setClips(outs);
    } finally {
      setBusy(false);
    }
  };

  const addClipToTrack = (clip: GeneratedClip) => {
    publish({ type: "APPLY_AI_TO_TRACK", notes: clip.notes, bpm: analysis?.bpm });
  };

  return (
    <div className="space-y-3">
      {/* pill input */}
      <div className="rounded-full bg-white px-4 py-2 border border-black/10 shadow-inner">
        <input
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          placeholder="Generate Chord Progression..."
          className="w-full outline-none text-[14px] placeholder-black/40"
        />
      </div>

      {/* buttons row */}
      <div className="flex items-center gap-4">
        <button
          onClick={() => {/* (optional) add real suggestions later */}}
          disabled={busy}
          className="px-2 py-1.5 bg-[#ff6a2a] text-black font-semibold rounded shadow
                     hover:brightness-105 active:translate-y-[1px] disabled:opacity-60"
          style={{ border: "1px solid rgba(0,0,0,.12)" }}
        >
          Suggestions
        </button>
        <button
          onClick={run}
          disabled={busy}
          className="px-2 py-1.5 bg-[#ff6a2a] text.black font-semibold rounded shadow
                     hover:brightness-105 active:translate-y-[1px] disabled:opacity-60"
          style={{ border: "1px solid rgba(0,0,0,.12)" }}
        >
          {busy ? "Generating…" : "Generate"}
        </button>
      </div>

      {/* results card area */}
      <div
        className="rounded-[16px] border border-black/10 bg-white/95"
        style={{ minHeight: 220 }}
      >
        <div className="p-3 space-y-3">
          {analysis && (
            <div className="text-xs text-black/70">
              <strong>Analysis:</strong> {analysis.genre} / {analysis.mood} — {analysis.bpm} BPM, {analysis.bars} bars, temp {analysis.temperature.toFixed(2)}, key {analysis.key}
            </div>
          )}

          <div className="grid grid-cols-1 gap-3">
            {clips.map((c, i) => (
              <div key={c.id} className="p-3 border rounded bg-white shadow-sm">
                <div className="flex items-center justify-between mb-2">
                  <div className="text-sm font-medium">Idea {i + 1}</div>
                  <div className="text-xs text-black/60">
                    {c.totalBeats.toFixed(1)} beats
                  </div>
                </div>
                <div className="text-xs text-black/70 mb-2">
                  {c.notes.slice(0, 10).map(n => n.pitch).join(", ")}{c.notes.length > 10 ? "…" : ""}
                </div>
                <button
                  onClick={() => addClipToTrack(c)}
                  className="px-3 py-1 rounded bg-black text-white text-sm"
                >
                  Add to Track
                </button>
              </div>
            ))}

            {!clips.length && (
              <div className="text-center text-black/50 py-6 text-sm">
                Your ideas will appear here after you generate.
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\AIModify.tsx
File type: .tsx
import React, { useState } from "react";

export default function AIModify() {
  const [prompt, setPrompt] = useState("");
  const [busy] = useState(false);

  return (
    <div className="space-y-3">
      {/* pill input */}
      <div className="rounded-full bg-white px-4 py-2 border border-black/10 shadow-inner">
        <input
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          placeholder="Make this jazzier…"
          className="w-full outline-none text-[14px] placeholder-black/40"
        />
      </div>

      {/* buttons row (visual only) */}
      <div className="flex items-center gap-4">
        <button
          disabled={busy}
          className="px-2 py-1.5 bg-[#ff6a2a] text-black font-semibold rounded shadow
                     hover:brightness-105 active:translate-y-[1px] disabled:opacity-60"
          style={{ border: "1px solid rgba(0,0,0,.12)" }}
        >
          Suggestions
        </button>
        <button
          disabled={busy}
          className="px-2 py-1.5 bg-[#ff6a2a] text-black font-semibold rounded shadow
                     hover:brightness-105 active:translate-y-[1px] disabled:opacity-60"
          style={{ border: "1px solid rgba(0,0,0,.12)" }}
        >
          Modify
        </button>
      </div>

      {/* results card area */}
      <div
        className="rounded-[16px] border border-black/10 bg-white/95"
        style={{ minHeight: 220 }}
      >
        <div className="p-3 space-y-3">
          <div className="text-center text-black/50 py-6 text-sm">
            Your modified ideas will appear here (UI only for now).
          </div>
        </div>
      </div>
    </div>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\AIStyleTransfer.tsx
File type: .tsx
import React, { useState } from "react";

export default function AIStyleTransfer() {
  const [prompt, setPrompt] = useState("");
  const [busy] = useState(false);

  return (
    <div className="space-y-3">
      {/* pill input */}
      <div className="rounded-full bg-white px-4 py-2 border border-black/10 shadow-inner">
        <input
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          placeholder="Change style to Lo‑Fi…"
          className="w-full outline-none text-[14px] placeholder-black/40"
        />
      </div>

      {/* buttons row (visual only) */}
      <div className="flex items-center gap-4">
        <button
          disabled={busy}
          className="px-2 py-1.5 bg-[#ff6a2a] text-black font-semibold rounded shadow
                     hover:brightness-105 active:translate-y-[1px] disabled:opacity-60"
          style={{ border: "1px solid rgba(0,0,0,.12)" }}
        >
          Suggestions
        </button>
        <button
          disabled={busy}
          className="px-2 py-1.5 bg-[#ff6a2a] text-black font-semibold rounded shadow
                     hover:brightness-105 active:translate-y-[1px] disabled:opacity-60"
          style={{ border: "1px solid rgba(0,0,0,.12)" }}
        >
          Style
        </button>
      </div>

      {/* results card area */}
      <div
        className="rounded-[16px] border border-black/10 bg-white/95"
        style={{ minHeight: 220 }}
      >
        <div className="p-3 space-y-3">
          <div className="text-center text-black/50 py-6 text-sm">
            Your styled ideas will appear here (UI only for now).
          </div>
        </div>
      </div>
    </div>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\AIToolsPanel.tsx
File type: .tsx
import React, { useState } from "react";
import AIGenerate from "./AIGenerate";
import AIModify from "./AIModify";
import AIStyleTransfer from "./AIStyleTransfer";

const TABS = ["Generate", "Modify", "Style"] as const;
type Tab = typeof TABS[number];

export default function AIToolsPanel() {
  const [tab, setTab] = useState<Tab>("Generate");

  return (
    <div className="w-full">
      <div className="flex gap-2 mb-3">
        {TABS.map((t) => (
          <button
            key={t}
            onClick={() => setTab(t)}
            className={`px-3 py-1 rounded ${tab === t ? "bg-teal-500 text-white" : "bg-gray-100"}`}
          >
            {t}
          </button>
        ))}
      </div>

      <div className="space-y-4">
        {tab === "Generate" && <AIGenerate />}
        {tab === "Modify" && <AIModify />}
        {tab === "Style" && <AIStyleTransfer />}
      </div>
    </div>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\EditMenu.tsx
File type: .tsx
// frontend/src/components/workspace/EditMenu.tsx
import React from "react";

interface EditMenuProps {
  onSelect: () => void;   // close dropdown
  onUndo: () => void;
  onRedo: () => void;
  onCut: () => void;
  onCopy: () => void;
  onPaste: () => void;
  onDelete: () => void;
  onSelectAll: () => void;
}

const EditMenu: React.FC<EditMenuProps> = ({
  onSelect,
  onUndo,
  onRedo,
  onCut,
  onCopy,
  onPaste,
  onDelete,
  onSelectAll,
}) => {
  const items = [
    { label: "Undo",        shortcut: "Ctrl+Z",  action: onUndo },
    { label: "Redo",        shortcut: "Ctrl+Y",  action: onRedo },
    { separator: true },
    { label: "Cut",         shortcut: "Ctrl+X",  action: onCut },
    { label: "Copy",        shortcut: "Ctrl+C",  action: onCopy },
    { label: "Paste",       shortcut: "Ctrl+V",  action: onPaste },
    { label: "Delete",                       action: onDelete },
    { separator: true },
    { label: "Select All",  shortcut: "Ctrl+A",  action: onSelectAll },
  ] as const;

  return (
    <div className="mt-1 w-48 bg-white border border-gray-200 rounded-md shadow-lg">
      {items.map((item, i) =>
        "separator" in item ? (
          <div key={i} className="border-t border-gray-200 my-1" />
        ) : (
          <button
            key={item.label}
            onClick={() => {
              item.action();
              onSelect();
            }}
            className="flex justify-between w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
          >
            <span>{item.label}</span>
            {item.shortcut && (
              <span className="text-xs text-gray-400">{item.shortcut}</span>
            )}
          </button>
        )
      )}
    </div>
  );
};

export default EditMenu;


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\FileMenu.tsx
File type: .tsx
// src/components/workspace/FileMenu.tsx
import React from "react";

type MenuItem =
  | { separator: true }
  | {
      label: string;
      action: () => void;
      shortcut?: string;
      disabled?: boolean;
    };

interface FileMenuProps {
  onSelect: () => void;                // closes the dropdown
  onNew: () => void;
  onOpen: () => void;
  onSave: () => void;
  onSaveAs: () => void;
  onImportMidi: (file: File) => void;
  onExportMidi: () => void;
  onExportStems: () => void;
  onClose: () => void;

  /** If false, Import/Export MIDI are disabled (e.g., not in Track Editor). */
  canUseTrackActions?: boolean;
}

export default function FileMenu({
  onSelect,
  onNew,
  onOpen,
  onSave,
  onSaveAs,
  onImportMidi,
  onExportMidi,
  onExportStems,
  onClose,
  canUseTrackActions,
}: FileMenuProps) {
  // default to true if not provided
  const canUse = canUseTrackActions !== false;

  const items: MenuItem[] = [
    { label: "New Project",    shortcut: "Ctrl+N",       action: onNew },
    { label: "Open Project…",  shortcut: "Ctrl+O",       action: onOpen },
    { separator: true },
    { label: "Save",           shortcut: "Ctrl+S",       action: onSave },
    { label: "Save As…",       shortcut: "Ctrl+Shift+S", action: onSaveAs },
    { separator: true },
    {
      label: "Import MIDI",
      disabled: !canUse,
      action: () => {
        if (!canUse) return;
        const inp = document.createElement("input");
        inp.type = "file";
        inp.accept = ".mid";
        inp.onchange = () => {
          if (inp.files?.[0]) onImportMidi(inp.files[0]);
        };
        inp.click();
      },
    },
    {
      label: "Export MIDI",
      disabled: !canUse,
      action: () => {
        if (!canUse) return;
        onExportMidi();
      },
    },
    { label: "Export Stems", action: onExportStems },
    { separator: true },
    { label: "Close Project", action: onClose },
  ];

  return (
    <div className="absolute left-0 top-full mt-1 w-56 bg-white border border-gray-200 rounded-md shadow-lg z-50">
      {items.map((item, i) =>
        "separator" in item ? (
          <div key={`sep-${i}`} className="border-t border-gray-200 my-1" />
        ) : (
          <button
            key={item.label}
            onClick={() => {
              if (item.disabled) return;
              item.action();
              onSelect();
            }}
            disabled={item.disabled}
            className={
              "flex justify-between w-full px-4 py-2 text-sm focus:outline-none " +
              (item.disabled
                ? "text-gray-300 cursor-not-allowed"
                : "text-gray-700 hover:bg-gray-100")
            }
          >
            <span>{item.label}</span>
            {item.shortcut && (
              <span className="text-xs text-gray-400">{item.shortcut}</span>
            )}
          </button>
        )
      )}
    </div>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\MIDIToolsMenu.tsx
File type: .tsx
// frontend/src/components/workspace/MIDIToolsMenu.tsx
import React from "react";

interface MIDIToolsMenuProps {
  onSelect: () => void;
  onTranspose: () => void;
  onVelocity: () => void;
  onNoteLength: () => void;
  onHumanize: () => void;
  onArpeggiate: () => void;
  onStrum: () => void;
  onLegato: () => void;
}

const MIDIToolsMenu: React.FC<MIDIToolsMenuProps> = ({
  onSelect,
  onTranspose,
  onVelocity,
  onNoteLength,
  onHumanize,
  onArpeggiate,
  onStrum,
  onLegato,
}) => {
  const items = [
    { label: "Transpose",          action: onTranspose },
    { label: "Velocity Control",   action: onVelocity },
    { label: "Note Length Adjust", action: onNoteLength },
    { separator: true },
    { label: "Humanization",       action: onHumanize },
    { label: "Arpeggiator",        action: onArpeggiate },
    { label: "Strumming Effect",   action: onStrum },
    { label: "Legato/Portamento",  action: onLegato },
  ] as const;

  return (
    <div className="mt-1 w-56 bg-white border border-gray-200 rounded-md shadow-lg">
      {items.map((item, i) =>
        "separator" in item ? (
          <div key={i} className="border-t border-gray-200 my-1" />
        ) : (
          <button
            key={item.label}
            onClick={() => {
              item.action();
              onSelect();
            }}
            className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
          >
            {item.label}
          </button>
        )
      )}
    </div>
  );
};

export default MIDIToolsMenu;


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\SettingsMenu.tsx
File type: .tsx
// frontend/src/components/workspace/SettingsMenu.tsx
import React from "react";

interface SettingsMenuProps {
  onSelect: () => void;
  onKeyScaleLock: () => void;
  onAudioEngine: () => void;
  onMidiInput: () => void;
  onShortcuts: () => void;
  onGridSettings: () => void;
  onLatency: () => void;
}

const SettingsMenu: React.FC<SettingsMenuProps> = ({
  onSelect,
  onKeyScaleLock,
  onAudioEngine,
  onMidiInput,
  onShortcuts,
  onGridSettings,
  onLatency,
}) => {
  const items = [
    { label: "Key / Scale Lock…", action: onKeyScaleLock },
    { label: "Audio Engine…",     action: onAudioEngine },
    { label: "MIDI Input…",       action: onMidiInput },
    { separator: true },
    { label: "Editor Shortcuts",  action: onShortcuts },
    { label: "Grid / Snap",       action: onGridSettings },
    { label: "Latency / Buffer",  action: onLatency },
  ] as const;

  return (
    <div className="mt-1 w-56 bg-white border border-gray-200 rounded-md shadow-lg">
      {items.map((item, i) =>
        "separator" in item ? (
          <div key={i} className="border-t border-gray-200 my-1" />
        ) : (
          <button
            key={item.label}
            onClick={() => {
              item.action();
              onSelect();
            }}
            className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
          >
            {item.label}
          </button>
        )
      )}
    </div>
  );
};

export default SettingsMenu;


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\SoundLibraryMenu.tsx
File type: .tsx
// frontend/src/components/workspace/SoundLibraryMenu.tsx
import React from "react";

interface SoundLibraryMenuProps {
  onSelect: () => void;      // close dropdown
  onUploadSound: () => void; // open modal
}

const SoundLibraryMenu: React.FC<SoundLibraryMenuProps> = ({
  onSelect,
  onUploadSound,
}) => {
  const items = [
    { label: "Import sound…", action: onUploadSound },
  ] as const;

  return (
    <div className="mt-1 w-48 bg-white border border-gray-200 rounded-md shadow-lg">
      {items.map((item) => (
        <button
          key={item.label}
          onClick={() => {
            item.action();
            onSelect();
          }}
          className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
        >
          {item.label}
        </button>
      ))}
    </div>
  );
};

export default SoundLibraryMenu;


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\SoundLibraryModal.tsx
File type: .tsx
// frontend/src/components/workspace/SoundLibraryModal.tsx
import React, { useRef } from "react";
import { publish } from "./midi-editor/core/editorBus";

type Props = {
  isOpen: boolean;
  onClose: () => void;
};

const SoundLibraryModal: React.FC<Props> = ({ isOpen, onClose }) => {
  const fileRef = useRef<HTMLInputElement>(null);

  if (!isOpen) return null;

  const triggerPick = () => fileRef.current?.click();

  const handlePick: React.ChangeEventHandler<HTMLInputElement> = (e) => {
    const file = e.target.files?.[0];
    if (!file) return;
    // Hand off to editor via event bus
    publish({ type: "IMPORT_SAMPLE", file });
    // reset & close
    e.target.value = "";
    onClose();
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/20">
      <div className="w-[720px] max-w-[90vw] rounded-lg bg-white shadow-xl p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-semibold">Sound Library</h2>
          <button
            className="rounded px-2 py-1 text-gray-600 hover:bg-gray-100"
            onClick={onClose}
          >
            ×
          </button>
        </div>

        {/* Simple categories (placeholder UI) */}
        <div className="grid grid-cols-3 gap-3 mb-6">
          <button className="h-14 rounded-md border hover:bg-gray-50">Keyboard/Synth</button>
          <button className="h-14 rounded-md border hover:bg-gray-50">Drums</button>
          <button className="h-14 rounded-md border hover:bg-gray-50">Bass</button>
          <button className="h-14 rounded-md border hover:bg-gray-50">Strings</button>
        </div>

        <div className="flex items-center justify-between">
          <div className="text-sm text-gray-500">
            Import a custom audio sample to use as an instrument on the current track.
          </div>
          <button
            onClick={triggerPick}
            className="inline-flex items-center gap-2 rounded-md border px-3 py-2 text-sm font-medium hover:bg-gray-50"
          >
            Import sound
          </button>
          <input
            ref={fileRef}
            type="file"
            accept="audio/*"
            className="hidden"
            onChange={handlePick}
          />
        </div>
      </div>
    </div>
  );
};

export default SoundLibraryModal;


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\WorkspaceNavBar.tsx
File type: .tsx
import React, { useState, useRef, useEffect } from "react";
import { ChevronLeft, ChevronRight, HelpCircle } from "lucide-react";

import FileMenu from "./FileMenu";
import EditMenu from "./EditMenu";
import SoundLibraryMenu from "./SoundLibraryMenu";
import SettingsMenu from "./SettingsMenu";
import MIDIToolsMenu from "./MIDIToolsMenu";
import SoundLibraryModal from "./SoundLibraryModal";
import { publish } from "./midi-editor/core/editorBus";

const TABS = ["File", "Edit", "Sound Library", "Settings", "MIDI Tools"] as const;
type Tab = typeof TABS[number];

type Props = {
  onNew: () => void;
  onOpen: () => void;
  onSave: () => void;
  onSaveAs: () => void;
  onImportMidi: (file: File) => void;
  onExportMidi: () => void;
  onExportStems: () => void;
  onClose: () => void;
};

const WorkspaceNavBar: React.FC<Props> = ({
  onNew,
  onOpen,
  onSave,
  onSaveAs,
  onImportMidi,
  onExportMidi,
  onExportStems,
  onClose,
}) => {
  const [openDropdown, setOpenDropdown] = useState<Tab | null>(null);
  const [libraryOpen, setLibraryOpen] = useState(false);
  const ref = useRef<HTMLDivElement>(null);

  // Close dropdowns on outside click
  useEffect(() => {
    const onClickOutside = (e: MouseEvent) => {
      if (ref.current && !ref.current.contains(e.target as Node)) {
        setOpenDropdown(null);
      }
    };
    document.addEventListener("mousedown", onClickOutside);
    return () => document.removeEventListener("mousedown", onClickOutside);
  }, []);

  const toggle = (tab: Tab) => {
    setOpenDropdown((prev) => (prev === tab ? null : tab));
  };

  return (
    <div ref={ref}
    className="w-full rounded-lg px-4 py-2 flex items-center justify-between shadow-sm"
  style={{
    backgroundColor: "#E9DCC9", 
    borderRadius: "10px",
    height: "40px"
  }}>
      {/* Top row */}
      <div className="flex items-center justify-between px-6 h-12">
        <div className="flex items-center gap-4">
          {/* Nav history */}
          <button className="p-1 hover:bg-gray-100 rounded" onClick={() => window.history.back()}>
            <ChevronLeft size={20} />
          </button>
          <button className="p-1 hover:bg-gray-100 rounded" onClick={() => window.history.forward()}>
            <ChevronRight size={20} />
          </button>

          {/* Tabs */}
          <nav className="flex gap-6 ml-4">
            {TABS.map((tab) => (
              <div key={tab} className="relative">
                <button
                  onClick={() => toggle(tab)}
                  className={`pb-[10px] text-sm ${
                    openDropdown === tab
                      ? "border-b-2 border-teal-500 font-medium"
                      : "text-gray-600 hover:text-black"
                  }`}
                >
                  {tab}
                </button>

                {/* File */}
                {openDropdown === "File" && tab === "File" && (
                  <div className="absolute left-0 top-full z-30">
                    <FileMenu
                      onSelect={() => setOpenDropdown(null)}
                      onNew={onNew}
                      onOpen={onOpen}
                      onSave={onSave}
                      onSaveAs={onSaveAs}
                      // Import MIDI -> publish to editor
                      onImportMidi={(file) => {
                        publish({ type: "IMPORT_MIDI_FILE", file });
                        // still bubble if caller cares
                        onImportMidi?.(file);
                      }}
                      // Export MIDI -> publish to editor
                      onExportMidi={() => {
                        publish({ type: "EXPORT_MIDI" });
                        onExportMidi?.();
                      }}
                      onExportStems={onExportStems}
                      onClose={onClose}
                    />
                  </div>
                )}

                {/* Edit */}
                {openDropdown === "Edit" && tab === "Edit" && (
                  <div className="absolute left-0 top-full z-30">
                    <EditMenu
                      onSelect={() => setOpenDropdown(null)}
                      onUndo={() => publish({ type: "UNDO" })}
                      onRedo={() => publish({ type: "REDO" })}
                      onCut={() => publish({ type: "CUT" })}
                      onCopy={() => publish({ type: "COPY" })}
                      onPaste={() => publish({ type: "PASTE" })}
                      onDelete={() => publish({ type: "DELETE" })}
                      onSelectAll={() => publish({ type: "SELECT_ALL" })}
                    />
                  </div>
                )}

                {/* Sound Library -> dropdown (opens modal on "Upload sound…") */}
                {openDropdown === "Sound Library" && tab === "Sound Library" && (
                  <div className="absolute left-0 top-full z-30">
                    <SoundLibraryMenu
                      onSelect={() => setOpenDropdown(null)}
                      onUploadSound={() => {
                        setOpenDropdown(null);
                        setLibraryOpen(true);
                      }}
                    />
                  </div>
                )}

                {/* Settings */}
                {openDropdown === "Settings" && tab === "Settings" && (
                  <div className="absolute left-0 top-full z-30">
                    <SettingsMenu
                      onSelect={() => setOpenDropdown(null)}
                      onKeyScaleLock={() => publish({ type: "OPEN_GRID_SETTINGS" })}
                      onAudioEngine={() => publish({ type: "OPEN_AUDIO_ENGINE" })}
                      onMidiInput={() => publish({ type: "OPEN_MIDI_INPUT" })}
                      onShortcuts={() => publish({ type: "OPEN_SHORTCUTS" })}
                      onGridSettings={() => publish({ type: "TOGGLE_SNAP" })}
                      onLatency={() => publish({ type: "OPEN_LATENCY_SETTINGS" })}
                    />
                  </div>
                )}

                {/* MIDI Tools */}
                {openDropdown === "MIDI Tools" && tab === "MIDI Tools" && (
                  <div className="absolute left-0 top-full z-30">
                    <MIDIToolsMenu
                      onSelect={() => setOpenDropdown(null)}
                      onTranspose={() => publish({ type: "TRANSPOSE" })}
                      onVelocity={() => publish({ type: "VELOCITY" })}
                      onNoteLength={() => publish({ type: "NOTE_LENGTH" })}
                      onHumanize={() => publish({ type: "HUMANIZE" })}
                      onArpeggiate={() => publish({ type: "ARPEGGIATE" })}
                      onStrum={() => publish({ type: "STRUM" })}
                      onLegato={() => publish({ type: "LEGATO" })}
                    />
                  </div>
                )}
              </div>
            ))}
          </nav>
        </div>

        {/* Help placeholder */}
        <button className="p-2 hover:bg-gray-100 rounded-full" onClick={() => setLibraryOpen(true)}>
          <HelpCircle size={20} />
        </button>
      </div>

      {/* Sound Library Modal (upload / imported sounds) */}
      <SoundLibraryModal
        isOpen={libraryOpen}
        onClose={() => setLibraryOpen(false)}
      />
    </div>
  );
};

export default WorkspaceNavBar;


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\midi-editor\components\TransportBar\GlobalTransportBar.css
File type: .css
.transport-bar {
  display: flex;
  align-items: center;
  justify-content: center;
  background: #e9dcc9;           
  padding: 12px 18px;
  border: 1px solid rgba(0,0,0,0.12);
  border-radius: 16px;
  gap: 12px;
  box-shadow:
    inset 0 2px 0 rgba(255,255,255,0.7),
    0 10px 20px -10px rgba(0,0,0,0.35);
}

.transport-bar button {
  font-size: 18px;
  background: transparent;
  border: none;
  cursor: pointer;
  color: #121633; 
}            

.transport-bar button:hover {
  transform: scale(1.06);
}

.transport-bar input[type="range"] {
  width: 120px;
}


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\midi-editor\core\editorBus.ts
File type: .ts
// frontend/src/components/workspace/midi-editor/core/editorBus.ts
type EditorCommand =
  | { type: "UNDO" }
  | { type: "REDO" }
  | { type: "CUT" }
  | { type: "COPY" }
  | { type: "PASTE" }
  | { type: "DELETE" }
  | { type: "SELECT_ALL" }
  | { type: "TRANSPOSE" }
  | { type: "VELOCITY" }
  | { type: "NOTE_LENGTH" }
  | { type: "HUMANIZE" }
  | { type: "ARPEGGIATE" }
  | { type: "STRUM" }
  | { type: "LEGATO" }
  | { type: "IMPORT_SAMPLE"; file: File }
  // NEW — already published by your File menu/navbar
  | { type: "IMPORT_MIDI_FILE"; file: File }
  | { type: "EXPORT_MIDI" }
  // NEW — apply one generated clip to current track (append at end or at playhead)
  | { type: "APPLY_AI_TO_TRACK"; notes: Array<{ pitch:number; time:number; duration:number; velocity:number }>; bpm?: number; };

const bus = new EventTarget();

export function publish(cmd: EditorCommand) {
  bus.dispatchEvent(new CustomEvent("cmd", { detail: cmd }));
}

export function subscribe(fn: (cmd: EditorCommand) => void) {
  const handler = (e: Event) => {
    const ce = e as CustomEvent<EditorCommand>;
    fn(ce.detail);
  };
  bus.addEventListener("cmd", handler);
  return () => bus.removeEventListener("cmd", handler);
}


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\midi-editor\core\exportMidi.ts
File type: .ts
// src/components/workspace/midi-editor/core/exportMidi.ts
import { Midi } from "@tonejs/midi";

/**
 * Export a single track's notes to a downloadable .mid file.
 */
export function exportTrackToMidi(
  opts: {
    notes: Array<{ midi: number; time: number; duration: number; velocity?: number }>;
    bpm?: number;
    filename?: string;
  }
) {
  const { notes, bpm = 120, filename = "track" } = opts;

  const midi = new Midi();
  midi.header.ppq = 480;
  midi.header.setTempo(bpm);

  const track = midi.addTrack();
  notes.forEach(n => {
    track.addNote({
      midi: n.midi,
      time: n.time,
      duration: n.duration,
      velocity: n.velocity ?? 0.8,
    });
  });

  const bytes = midi.toArray();
  const blob = new Blob([bytes], { type: "audio/midi" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = `${filename}.mid`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

/**
 * Export multiple tracks to a single multi‑track .mid file.
 */
export function exportMultiTrackToMidi(
  opts: {
    tracks: Array<{
      name?: string;
      notes: Array<{ midi: number; time: number; duration: number; velocity?: number }>;
    }>;
    bpm?: number;
    filename?: string;
  }
) {
  const { tracks, bpm = 120, filename = "project" } = opts;

  const midi = new Midi();
  midi.header.ppq = 480;
  midi.header.setTempo(bpm);

  tracks.forEach(t => {
    const tr = midi.addTrack();
    if (t.name) tr.name = t.name;
    t.notes.forEach(n => {
      tr.addNote({
        midi: n.midi,
        time: n.time,
        duration: n.duration,
        velocity: n.velocity ?? 0.8,
      });
    });
  });

  const bytes = midi.toArray();
  const blob = new Blob([bytes], { type: "audio/midi" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = `${filename}.mid`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

// Optional: maintain backward compatibility if other code imported `exportMidi`
export const exportMidi = exportTrackToMidi;


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\midi-editor\core\importMidi.ts
File type: .ts
import { Midi } from '@tonejs/midi';

export async function importMidiFile(file: File) {
  const arrayBuffer = await file.arrayBuffer();
  const midi = new Midi(arrayBuffer);

  const notes: any[] = [];

  midi.tracks.forEach(track => {
    track.notes.forEach(note => {
      notes.push({
        id: `${note.midi}-${note.time}`, // unique-ish ID
        pitch: note.midi,
        time: note.time,
        duration: note.duration,
        velocity: Math.round(note.velocity * 127)
      });
    });
  });

  return {
    bpm: midi.header.tempos?.[0]?.bpm || 120,
    notes
  };
}

--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\midi-editor\core\MidiEditorCore.tsx
File type: .tsx
// frontend/src/components/workspace/midi-editor/core/MidiEditorCore.tsx
import GlobalTransportBar from "../components/TransportBar/GlobalTransportBar";
import React, { useState, useEffect, forwardRef, useImperativeHandle, useRef } from "react";
import TrackDashboard from "../components/TrackDashboard/TrackDashboard";
import TrackEditor, { TrackEditorAPI } from "../components/TrackEditor/TrackEditor";
import { TransportProvider } from "../core/TransportContext";

import { subscribe } from "./editorBus";
import { importMidiFile } from "./importMidi";
import { exportTrackToMidi, exportMultiTrackToMidi } from "./exportMidi";

export interface Track {
  id: string;
  name: string;
  notes: any[];
  instrument: string;
  customSoundUrl?: string;
}

interface MidiEditorCoreProps {
  projectId: number;
  bpm: number;
  initialTracks: Track[];
  onChange: (bpm: number, tracks: Track[]) => void;
  onSave?: () => void;
  showTransport?: boolean;
}

export type MidiEditorAPI = {
  undo(): void;
  redo(): void;
  cut(): void;
  copy(): void;
  paste(): void;
  deleteSelection(): void;
  selectAll(): void;
  transpose(semitones: number): void;
  velocityScale(mult: number): void;
  noteLengthScale(mult: number): void;
  humanize(amountMs?: number, velAmt?: number): void;
  arpeggiate(pattern?: "up" | "down" | "updown" | "random"): void;
  strum(ms?: number): void;
  legato(): void;
  // optional helpers
  exportMidi?(): void;
};

const MidiEditorCore = forwardRef<MidiEditorAPI, MidiEditorCoreProps>(({
  projectId,
  bpm: initialBpm,
  initialTracks = [],
  onChange,
  onSave,
  showTransport = true,
}, ref) => {
  const [bpm, setBpm] = useState(initialBpm);
  const [tracks, setTracks] = useState<Track[]>(initialTracks);
  const [activeTrackId, setActiveTrackId] = useState<string | null>(null);
  const editorRef = useRef<TrackEditorAPI | null>(null);

  useEffect(() => {
    setBpm(initialBpm);
    setTracks(initialTracks);
    setActiveTrackId(null);
  }, [projectId]);

  const addNewTrack = () => {
    const id = `t-${Date.now()}`;
    const newTrack: Track = {
      id,
      name: `Track ${tracks.length + 1}`,
      instrument: "Piano",
      notes: [],
    };
    const next = [...tracks, newTrack];
    setTracks(next);
    onChange(bpm, next);
  };

  const updateTrack = (id: string, updates: Partial<Track>) => {
    const next = tracks.map(t => (t.id === id ? { ...t, ...updates } : t));
    setTracks(next);
    onChange(bpm, next);
  };

  const deleteTrack = (id: string) => {
    const next = tracks.filter(t => t.id !== id);
    setTracks(next);
    onChange(bpm, next);
  };

  const changeBpm = (newBpm: number) => {
    setBpm(newBpm);
    onChange(newBpm, tracks);
  };

  const activeTrack = tracks.find((t) => t.id === activeTrackId) || null;

  // -------- EDITOR BUS: Import/Export + Apply AI to track --------
  useEffect(() => {
    return subscribe(async (cmd) => {
      if (cmd.type === "IMPORT_MIDI_FILE") {
        const parsed = await importMidiFile(cmd.file);
        // If in track view, add to that track; otherwise create a new track
        if (activeTrack) {
          updateTrack(activeTrack.id, {
            notes: [...activeTrack.notes, ...parsed.notes],
          });
          if (parsed.bpm && parsed.bpm !== bpm) changeBpm(parsed.bpm);
        } else {
          const id = `t-${Date.now()}`;
          const next: Track = {
            id,
            name: "Imported",
            instrument: "Piano",
            notes: parsed.notes,
          };
          const tracksNext = [...tracks, next];
          setTracks(tracksNext);
          onChange(parsed.bpm || bpm, tracksNext);
        }
      } else if (cmd.type === "EXPORT_MIDI") {
        if (activeTrack) {
          exportTrackToMidi({
            notes: activeTrack.notes.map(n => ({
              midi: n.pitch, time: n.time, duration: n.duration, velocity: (n.velocity ?? 90) / 127
            })),
            bpm,
            filename: activeTrack.name || "track"
          });
        } else {
          exportMultiTrackToMidi({
            tracks: tracks.map(t => ({
              name: t.name,
              notes: t.notes.map(n => ({
                midi: n.pitch, time: n.time, duration: n.duration, velocity: (n.velocity ?? 90) / 127
              }))
            })),
            bpm,
            filename: "project"
          });
        }
      } else if (cmd.type === "APPLY_AI_TO_TRACK") {
        const dest = activeTrack
          ? activeTrack
          : (() => {
              // create a track if none selected
              const id = `t-${Date.now()}`;
              const t: Track = { id, name: "AI Track", instrument: "Piano", notes: [] };
              const tracksNext = [...tracks, t];
              setTracks(tracksNext);
              onChange(bpm, tracksNext);
              setActiveTrackId(id);
              return t;
            })();

        // append at the end of the destination track
        const endBeat = dest.notes.reduce((m, n) => Math.max(m, n.time + n.duration), 0);
        const shifted = cmd.notes.map(n => ({
          ...n,
          time: endBeat + n.time
        }));

        updateTrack(dest.id, { notes: [...dest.notes, ...shifted] });
        if (cmd.bpm && cmd.bpm !== bpm) changeBpm(cmd.bpm);
      }
    });
  }, [tracks, activeTrackId, bpm]); // eslint-disable-line

  // Expose commands
  useImperativeHandle(ref, () => ({
    undo:            () => editorRef.current?.undo?.(),
    redo:            () => editorRef.current?.redo?.(),
    cut:             () => editorRef.current?.cut?.(),
    copy:            () => editorRef.current?.copy?.(),
    paste:           () => editorRef.current?.paste?.(),
    deleteSelection: () => editorRef.current?.deleteSelection?.(),
    selectAll:       () => editorRef.current?.selectAll?.(),
    transpose:       (n)  => editorRef.current?.transpose?.(n),
    velocityScale:   (m)  => editorRef.current?.velocityScale?.(m),
    noteLengthScale: (m)  => editorRef.current?.noteLengthScale?.(m),
    humanize:        (a, v) => editorRef.current?.humanize?.(a, v),
    arpeggiate:      (p)  => editorRef.current?.arpeggiate?.(p),
    strum:           (ms) => editorRef.current?.strum?.(ms),
    legato:          ()   => editorRef.current?.legato?.(),
    exportMidi:      () => {
      // convenience if someone calls editorRef.current?.exportMidi?.()
      if (activeTrack) {
        exportTrackToMidi({
          notes: activeTrack.notes.map(n => ({
            midi: n.pitch, time: n.time, duration: n.duration, velocity: (n.velocity ?? 90) / 127
          })),
          bpm,
          filename: activeTrack.name || "track"
        });
      } else {
        exportMultiTrackToMidi({
          tracks: tracks.map(t => ({
            name: t.name,
            notes: t.notes.map(n => ({
              midi: n.pitch, time: n.time, duration: n.duration, velocity: (n.velocity ?? 90) / 127
            }))
          })),
          bpm,
          filename: "project"
        });
      }
    }
  }), [tracks, activeTrackId, bpm]);

  return (
    <TransportProvider>
      <div className="flex flex-col h-full bg-white rounded-lg shadow-lg overflow-hidden">
        <div className="flex-1 min-h-0 overflow-hidden">
          {activeTrack ? (
            <div className="max-h-[420px] overflow-y-auto">
              <TrackEditor
                ref={editorRef}
                track={activeTrack}
                updateTrack={(u) => updateTrack(activeTrack.id, u)}
                goBack={() => setActiveTrackId(null)}
              />
            </div>
          ) : (
            <TrackDashboard
              tracks={tracks}
              onEditTrack={(id) => setActiveTrackId(id)}
              onAddTrack={addNewTrack}
              updateTrack={updateTrack}
              deleteTrack={deleteTrack}
            />
          )}
        </div>
        {showTransport && (
          <div className="px-6 py-3 border-t bg-gray-50">
            <GlobalTransportBar />
          </div>
        )}
      </div>
    </TransportProvider>
  );
});

export default MidiEditorCore;


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\midi-editor\core\midiUtils.ts
File type: .ts
export const getActiveNotesAtBeat = (notes: any[], beat: number): any[] => {
  return notes.filter(note =>
    beat >= note.time && beat < note.time + note.duration
  );
};


--------------------------------------------------
File End
--------------------------------------------------


src\config\apiConfig.ts
File type: .ts


--------------------------------------------------
File End
--------------------------------------------------


src\config\appConfig.ts
File type: .ts


--------------------------------------------------
File End
--------------------------------------------------


src\context\authStore.ts
File type: .ts


--------------------------------------------------
File End
--------------------------------------------------


src\context\midiStore.ts
File type: .ts
import { create } from 'zustand';

export type MIDINote = {
  track: number;
  time: number;
  pitch: string;
  duration: number;
};

type MIDIState = {
  notes: MIDINote[];
  addNote: (note: MIDINote) => void;
  removeNote: (track: number, time: number) => void;
  clearNotes: () => void;
};

export const useMIDIStore = create<MIDIState>((set) => ({
  notes: [],
  addNote: (note) =>
    set((state) => ({
      notes: [...state.notes, note],
    })),
  removeNote: (track, time) =>
    set((state) => ({
      notes: state.notes.filter((n) => !(n.track === track && n.time === time)),
    })),
  clearNotes: () => set({ notes: [] }),
}));

--------------------------------------------------
File End
--------------------------------------------------


src\hooks\useAuth.ts
File type: .ts
import { useState, useEffect } from 'react';
import * as authService from '../services/authService';

interface TokenResponse {
  access_token: string;
  token_type: string;
}

export const useAuth = () => {
  const [token, setToken] = useState<string | null>(() => localStorage.getItem('token'));
  const [user, setUser] = useState<any>(null); // later replace with User type if needed

  useEffect(() => {
    const storedToken = localStorage.getItem('token');
    if (storedToken && !token) {
      setToken(storedToken);
      // optionally: fetch user info here
    }
  }, []);

  const saveToken = (token: string) => {
    localStorage.setItem('token', token);
    setToken(token);
  };

  const register = async (username: string, password: string): Promise<void> => {
    const data: TokenResponse = await authService.register(username, password);
    saveToken(data.access_token);
  };

  const login = async (username: string, password: string): Promise<void> => {
    const data: TokenResponse = await authService.login(username, password);
    saveToken(data.access_token);
  };

  const logout = () => {
    localStorage.removeItem('token');
    setToken(null);
    setUser(null);
  };

  const isLoggedIn = !!token;

  return { token, user, isLoggedIn, login, register, logout };
};


--------------------------------------------------
File End
--------------------------------------------------


src\hooks\useMIDI.ts
File type: .ts


--------------------------------------------------
File End
--------------------------------------------------


src\pages\AuthPage.tsx
File type: .tsx
import React, { useState } from "react";
import LoginForm from "../components/auth/LoginForm";
import SignUpForm from "../components/auth/SignUpForm";
import AuthToggle from "../components/auth/AuthToggle";

const BEIGE = "#dcc7af";          
const PAGE_BG = "#f8f3ed";         

const AuthPage: React.FC = () => {
  const [isLogin, setIsLogin] = useState(true);

  return (
    <div
      className="min-h-screen flex items-center justify-center px-4"
      style={{ background: PAGE_BG }}
    >
      <div className="w-full max-w-md">
        {/* Logo */}
        <img
          src="/MIDIMIJAI-LOGO.png"
          alt="MIDIMIJAI"
          className="mx-auto mb-6 h-14 select-none"
          draggable={false}
        />

        {/* Card */}
        <div
          className="rounded-[28px] shadow-[0_30px_60px_-18px_rgba(0,0,0,0.25)] p-6 sm:p-8"
          style={{ background: BEIGE }}
        >
          {/* Toggle */}
          <AuthToggle isLogin={isLogin} setIsLogin={setIsLogin} />

          {/* Form */}
          <div className="mt-5">{isLogin ? <LoginForm /> : <SignUpForm />}</div>
        </div>
      </div>
    </div>
  );
};

export default AuthPage;


--------------------------------------------------
File End
--------------------------------------------------


src\pages\DashboardPage.tsx
File type: .tsx
import React, { useMemo, useState } from "react";
import SortTabs, { SortKey } from "../components/dashboard/SortTabs";
import SearchBar from "../components/dashboard/SearchBar";
import UserDropdown from "../components/dashboard/UserDropdown";
import ProjectList from "../components/dashboard/ProjectList";
import NewProjectButton from "../components/dashboard/NewProjectButton";
import { useProjects } from "../hooks/useProjects";

const PAGE_BG = "#fbf5ee";  
const BEIGE   = "#e9dcc9";  

const DashboardPage: React.FC = () => {
  const { projects = [], loading, error } = useProjects();

  const [sortOption, setSortOption] = useState<SortKey>("created");
  const [searchTerm, setSearchTerm] = useState("");

  const sortedProjects = useMemo(() => {
    let copy = projects.slice();

    if (searchTerm) {
      const q = searchTerm.toLowerCase();
      copy = copy.filter((p: any) => p.name?.toLowerCase().includes(q));
    }

    switch (sortOption) {
      case "created":
        return copy.sort(
          (a: any, b: any) =>
            new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
        );
      case "name":
        return copy.sort((a: any, b: any) => (a.name || "").localeCompare(b.name || ""));
      case "modified":
        return copy.sort(
          (a: any, b: any) =>
            new Date(b.updated_at || b.modified_at || b.created_at).getTime() -
            new Date(a.updated_at || a.modified_at || a.created_at).getTime()
        );
      default:
        return copy;
    }
  }, [projects, sortOption, searchTerm]);

  return (
    <div className="min-h-screen flex flex-col" style={{ background: PAGE_BG }}>
      {/* Top bar */}
      <div className="w-full flex items-center gap-4 px-5 sm:px-6 pt-4">
        <SortTabs selected={sortOption} onSelect={setSortOption} />
        <div className="flex-1">
          <SearchBar value={searchTerm} onChange={setSearchTerm} />
        </div>
        <UserDropdown />
      </div>

      {/* Main panel */}
      <div className="px-5 sm:px-6 py-5">
        <div
          className="mx-auto w-full max-w-[1000px] rounded-[28px]"
          style={{ background: BEIGE }}
        >
          {loading && <p className="text-center text-black/60">Loading projects…</p>}
          {error && <p className="text-center text-red-500">{String(error)}</p>}
          {!loading && !error && (
            <ProjectList projects={sortedProjects} />
          )}
        </div>
      </div>

      {/* Bottom CTA */}
      <div className="pb-8 flex items-center justify-center">
        <NewProjectButton />
      </div>
    </div>
  );
};

export default DashboardPage;


--------------------------------------------------
File End
--------------------------------------------------


src\pages\HomePage.tsx
File type: .tsx
import React from "react";
import FeatureList from "../components/home/FeatureList";
import StepGuide from "../components/home/StepGuide";
import UserTypes from "../components/home/UserTypes";
import Footer from "../components/home/Footer";
import HeroSection from "../components/home/HeroSection";

const HomePage: React.FC = () => {
  return (
    <div className="min-h-screen bg-[#fbf5ee]">
      <HeroSection />
      <FeatureList />
      <StepGuide />
      <UserTypes />
      <Footer />
    </div>
  );
};

export default HomePage;


--------------------------------------------------
File End
--------------------------------------------------


src\pages\WorkspacePage.tsx
File type: .tsx
import React, { useRef, useState } from "react";
import WorkspaceNavBar from "../components/workspace/WorkspaceNavBar";
import AIDock from "../components/workspace/AIDock";
import MidiEditorCore, { MidiEditorAPI, Track } from "../components/workspace/midi-editor/core/MidiEditorCore";

const PAGE_BG = "#fbf5ee"; 
const BEIGE   = "#e9dcc9";  

export default function WorkspacePage() {
  const editorRef = useRef<MidiEditorAPI | null>(null);
  const [projectId] = useState(1);
  const [bpm, setBpm] = useState(120);
  const [tracks, setTracks] = useState<Track[]>([
    { id: "t1", name: "Track 1", instrument: "Piano", notes: [] },
  ]);

  return (
    <div className="min-h-screen flex flex-col" style={{ background: PAGE_BG }}>
      {/* Top nav */}
      <WorkspaceNavBar
        onNew={() => {}}
        onOpen={() => {}}
        onSave={() => {}}
        onSaveAs={() => {}}
        onImportMidi={() => {}}
        onExportMidi={() => editorRef.current?.exportMidi?.()}
        onExportStems={() => {}}
        onClose={() => {}}
      />

      {/* Main area */}
      <div className="flex-1 px-4 sm:px-6 py-4">
        <div
          className="
            relative grid grid-cols-1 lg:grid-cols-[1fr_360px]
            gap-4 lg:gap-6 rounded-[28px]
            shadow-[0_40px_80px_-28px_rgba(0,0,0,0.35)]
            border border-black/10
            p-3 sm:p-4 lg:p-5
          "
          style={{ 
            background: BEIGE,
            height: "calc(100vh - 100px)", 
          }}
        >
          {/* Editor plate */}
          <div className="rounded-2xl bg-white overflow-hidden border border-black/10">
            <MidiEditorCore
              ref={editorRef as any}
              projectId={projectId}
              bpm={bpm}
              initialTracks={tracks}
              onChange={(nextBpm, nextTracks) => {
                setBpm(nextBpm);
                setTracks(nextTracks);
              }}
              showTransport
            />
          </div>

          {/* AI dock */}
          <div className="lg:block min-h-0">
            <AIDock />
          </div>
        </div>
      </div>
    </div>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


src\services\aiService.ts
File type: .ts
// frontend/src/services/aiService.ts
import axios from "axios";

const AI_API_URL = "http://localhost:8000/ai";

const getAuthHeader = () => {
  const token = localStorage.getItem("token");
  return { headers: { Authorization: `Bearer ${token}` } };
};

export type AIMode =
  | "suggest"
  | "generate"
  | "modify-suggest"
  | "modify"
  | "style-suggest"
  | "style";

export interface AIGenerateRequest {
  prompt: string;
  mode?: AIMode;             // <- optional (backend supports it)
  length_beats?: number;
  temperature?: number;
}

export interface AIGenerateResponse {
  suggestions?: string[];
  data?: any;                // project-shaped { bpm, tracks: [...] }
  midi?: string;
}

export const postAIGenerate = async (
  body: AIGenerateRequest
): Promise<AIGenerateResponse> => {
  // FIX: remove duplicate /ai; endpoint is /ai/generate not /ai/ai/generate
  const res = await axios.post(`${AI_API_URL}/generate`, body, getAuthHeader());
  return res.data;
};


--------------------------------------------------
File End
--------------------------------------------------


src\services\authService.ts
File type: .ts
import axios from 'axios';

const API_URL = 'http://localhost:8000/auth';

export interface TokenResponse {
  access_token: string;
  token_type: string;
}

export const register = async (username: string, password: string): Promise<TokenResponse> => {
  const res = await axios.post<TokenResponse>(`${API_URL}/register`, { username, password });
  return res.data;
};

export const login = async (username: string, password: string): Promise<TokenResponse> => {
  const res = await axios.post<TokenResponse>(`${API_URL}/login`, { username, password });
  return res.data;
};


--------------------------------------------------
File End
--------------------------------------------------


src\services\hfService.ts
File type: .ts
// src/services/hfService.ts
import { HfInference } from "@huggingface/inference";

const HF_MODEL = "Qwen/Qwen2.5-1.5B-Instruct"; // small, free, flexible
const token = import.meta.env.VITE_HF_TOKEN as string | undefined;

// Fallback if no token: we'll still attempt; HF allows limited anon for some models.
// You can also switch to a tiny text-classifier if desired.
const hf = new HfInference(token);

export type PromptAnalysis = {
  genre: string;      // e.g., "lofi", "pop", "house", "jazz"
  mood: string;       // e.g., "chill", "happy", "dark"
  bpm: number;        // suggested BPM
  bars: number;       // length in bars
  temperature: number;// 0.2..1.5
  key: string;        // "C", "D#", "F", etc. (used just for display; Magenta is key-agnostic)
};

const SYSTEM = `You are a music prompt analyzer. 
Given a short text from a user, return STRICT JSON with keys:
genre (string), mood (string), bpm (int), bars (int), temperature (float), key (capital letter with optional #/b).
Keep bpm between 70 and 150, bars between 4 and 64, temperature between 0.2 and 1.5. No extra text.`;

export async function analyzePromptToJSON(userPrompt: string): Promise<PromptAnalysis> {
  try {
    const res = await hf.chatCompletion({
      model: HF_MODEL,
      messages: [
        { role: "system", content: SYSTEM },
        { role: "user", content: userPrompt }
      ],
      max_tokens: 200,
      temperature: 0.5,
    });

    const content = res.choices?.[0]?.message?.content ?? "{}";
    // Some models return JSON fenced in code blocks. Strip if needed:
    const json = content.replace(/^```json|```$/g, "").trim();
    const parsed = JSON.parse(json);

    // lightweight sanity defaults
    return {
      genre: parsed.genre || "pop",
      mood: parsed.mood || "bright",
      bpm: Math.min(150, Math.max(70, Number(parsed.bpm) || 120)),
      bars: Math.min(64, Math.max(4, Number(parsed.bars) || 8)),
      temperature: Math.min(1.5, Math.max(0.2, Number(parsed.temperature) || 1.0)),
      key: parsed.key || "C",
    };
  } catch {
    // Offline fallback if HF is unavailable
    return {
      genre: "pop",
      mood: "bright",
      bpm: 120,
      bars: 8,
      temperature: 0.9,
      key: "C",
    };
  }
}


--------------------------------------------------
File End
--------------------------------------------------


src\services\midiService.ts
File type: .ts


--------------------------------------------------
File End
--------------------------------------------------


src\services\projectService.ts
File type: .ts
// frontend/src/services/projectService.ts
import axios from "axios";

const API_URL = "http://localhost:8000/projects";

const getAuthHeader = () => {
  const token = localStorage.getItem("token");
  return {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  };
};

export const getAllProjects = async () => {
  const res = await axios.get(API_URL + "/", getAuthHeader());
  return res.data; // array of projects
};

export const getProjectById = async (id: number) => {
  const res = await axios.get(`${API_URL}/${id}`, getAuthHeader());
  return res.data;
};

export const createProject = async (name: string, data: any) => {
  const res = await axios.post(
    `${API_URL}/`,
    { name, data },
    getAuthHeader()
  );
  return res.data;
};

export const updateProject = async (
  id: number,
  name: string,
  data: any
) => {
  const res = await axios.put(
    `${API_URL}/${id}`,
    { name, data },
    getAuthHeader()
  );
  return res.data;
};

export const deleteProject = async (id: number) => {
  const res = await axios.delete(`${API_URL}/${id}`, getAuthHeader());
  return res.data;
};


--------------------------------------------------
File End
--------------------------------------------------


src\services\userService.ts
File type: .ts


--------------------------------------------------
File End
--------------------------------------------------


src\styles\auth.module.css
File type: .css


--------------------------------------------------
File End
--------------------------------------------------


src\styles\dashboard.module.css
File type: .css


--------------------------------------------------
File End
--------------------------------------------------


src\styles\globals.css
File type: .css
/* 1) Fonts FIRST */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');

/* 2) Tailwind (or @tailwind directives) */
@import "tailwindcss";
/* 3) Your custom rules AFTER all @imports/@tailwind */
:root {
  --app-font: 'Poppins', ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji";
}

html, body, #root {
  height: 100%;
  font-family: var(--app-font);
}

/* helpers used earlier */
.plate-glow {
  box-shadow:
    0 28px 48px -18px rgba(0,0,0,.45),
    0 0 28px 8px rgba(255,255,255,.85);
}
.text-glow-white {
  text-shadow:
    0 0 10px rgba(255,255,255,.95),
    0 0 18px rgba(255,255,255,.65);
}

:root{
  --orange-prim:#FF6A2A;
  --orange-dark:#E55513;
  --orange-grad-hi:#FF6A2A;
  --orange-grad-lo:#FFA37A;

  --beige-plate:#E9DCC9;
  --beige-card:#F7F2EA; 
  --text-deep:#121633;  
}

--------------------------------------------------
File End
--------------------------------------------------


src\styles\LoadingSpinner.css
File type: .css
.loading-spinner {
    border: 16px solid #f3f3f3;
    border-top: 16px solid #3498db;
    border-radius: 50%;
    width: 120px;
    height: 120px;
    animation: spin 2s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  

--------------------------------------------------
File End
--------------------------------------------------


src\styles\ToggleSwitch.css
File type: .css


--------------------------------------------------
File End
--------------------------------------------------


src\styles\workspace.module.css
File type: .css
.workspace-page {
  display: flex;
  flex-direction: column;
  height: 100vh;
}

.workspace-page > .fixed {
  position: sticky;
  top: 0;
  z-index: 10;
}

/* PianoRoll container gets full available height */
.piano-roll-container {
  height: calc(100% - 200px); /* adjust based on header/navbar height */
  overflow-y: auto;
}

/* Rounded panel & shadow for editor box */
.midi-editor-box {
  border-radius: 1rem;
  background: white;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

/* Rest of your Tailwind overrides… */

--------------------------------------------------
File End
--------------------------------------------------


src\types\projectTypes.ts
File type: .ts
export type Note = {
    id: string;
    pitch: number;
    time: number;
    duration: number;
    velocity: number;
  };
  
  export type Track = {
    id: string;
    name: string;
    notes: Note[];
    instrument: string;
    customSoundUrl?: string;
  };
  
  export type Project = {
    id: string;
    name: string;
    tracks: Track[];
    createdAt: string;
    updatedAt: string;
  };
  

--------------------------------------------------
File End
--------------------------------------------------


src\utils\constants.ts
File type: .ts


--------------------------------------------------
File End
--------------------------------------------------


src\utils\exportProject.ts
File type: .ts
import { Midi } from "@tonejs/midi";

/**
 * @param jsonData  A JSON string like `{"notes":[…],"bpm":120}`
 * @param filename  The base name (no extension) for the download
 */
export function exportProject(jsonData: string, filename: string) {
  // parse your stored data
  const { notes, bpm } = JSON.parse(jsonData) as {
    notes: Array<{
      midi: number;
      time: number;
      duration: number;
      velocity: number;
    }>;
    bpm: number;
  };

  // build a ToneJS Midi object
  const midi = new Midi();
  midi.header.ppq = 480;
  midi.header.setTempo(bpm);

  const track = midi.addTrack();
  notes.forEach((note) =>
    track.addNote({
      midi: note.midi,
      time: note.time,
      duration: note.duration,
      velocity: note.velocity,
    })
  );

  // serialize to ArrayBuffer and download
  const bytes = midi.toArray();
  const blob = new Blob([bytes], { type: "audio/midi" });
  const url = URL.createObjectURL(blob);

  const a = document.createElement("a");
  a.href = url;
  a.download = `${filename}.mid`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}


--------------------------------------------------
File End
--------------------------------------------------


src\utils\formatDate.ts
File type: .ts


--------------------------------------------------
File End
--------------------------------------------------


src\utils\generateMIDI.ts
File type: .ts
import { Midi } from '@tonejs/midi';
import * as Tone from 'tone';
import { MIDINote } from '../context/midiStore';

export const generateMIDI = (notes: MIDINote[]) => {
  const midi = new Midi();
  const track = midi.addTrack();

  notes.forEach((note) => {
    track.addNote({
      midi: Tone.Frequency(note.pitch).toMidi(),
      time: note.time * Tone.Time('16n').toSeconds(),
      duration: Tone.Time('16n').toSeconds(),
    });
  });

  const blob = new Blob([midi.toArray()], { type: 'audio/midi' });
  const url = URL.createObjectURL(blob);
  return url;
};

--------------------------------------------------
File End
--------------------------------------------------


src\utils\instruments.ts
File type: .ts
import * as Tone from 'tone';

export const getInstrument = (type: string) => {
  switch (type) {
    case 'keyboard':
      return new Tone.Synth().toDestination();
    case 'drums':
      return new Tone.MembraneSynth().toDestination();
    case 'bass':
      return new Tone.MonoSynth().toDestination();
    default:
      return new Tone.Synth().toDestination();
  }
};

--------------------------------------------------
File End
--------------------------------------------------


src\utils\magenta.ts
File type: .ts
// src/utils/magenta.ts
import * as mm from "@magenta/music";

let rnn: mm.MusicRNN | null = null;

// Basic_rnn is fast and decent for short melodic ideas.
// Other checkpoints: look at @magenta/music docs if you want different flavors.
const RNN_URL = "https://storage.googleapis.com/magentadata/js/checkpoints/music_rnn/basic_rnn";

export async function ensureRNN() {
  if (!rnn) {
    rnn = new mm.MusicRNN(RNN_URL);
    await rnn.initialize();
  }
  return rnn!;
}

export type GeneratedClip = {
  id: string;
  notes: Array<{ id: string; pitch: number; time: number; duration: number; velocity: number }>;
  totalBeats: number;
};

// Convert a Magenta NoteSequence into your note shape (beats as time)
function toEditorNotes(ns: mm.INoteSequence): GeneratedClip {
  // Tone grid in your editor uses beats; Magenta NoteSequence uses totalTime in seconds with tempo metadata.
  const bpm = ns.tempos?.[0]?.qpm ?? 120;
  const secPerBeat = 60 / bpm;

  const out = (ns.notes || []).map((n, i) => {
    const startBeat = (n.startTime ?? 0) / secPerBeat;
    const endBeat = (n.endTime ?? 0) / secPerBeat;
    return {
      id: `g-${i}-${n.pitch}-${startBeat.toFixed(3)}`,
      pitch: n.pitch,
      time: startBeat,
      duration: Math.max(0.125, endBeat - startBeat),
      velocity: Math.round((n.velocity ?? 80)),
    };
  });

  const totalBeats = ((ns.totalTime ?? 0) / secPerBeat) || (out.reduce((m, n) => Math.max(m, n.time + n.duration), 0));
  return { id: `clip-${Date.now()}-${Math.random().toString(36).slice(2)}`, notes: out, totalBeats };
}

/**
 * Generate N melodic ideas using Magenta MusicRNN.
 * @param bars   How many bars to expand to (assuming 4/4)
 * @param bpm    QPM for the sequence (Magenta uses qpm)
 * @param temperature  randomness 0.2..1.5
 * @param count  number of ideas
 */
export async function generateMelodies({ bars, bpm, temperature, count = 3 }: {
  bars: number; bpm: number; temperature: number; count?: number;
}): Promise<GeneratedClip[]> {
  const model = await ensureRNN();

  // Start seed: a simple single C note; RNN will expand.
  const seed: mm.INoteSequence = mm.sequences.quantizeNoteSequence({
    notes: [{ pitch: 60, startTime: 0, endTime: 0.4, velocity: 90 }],
    tempos: [{ qpm: bpm }],
    totalTime: 0.5
  }, 4);

  // total quantized steps: bars * 4 beats * 4 steps/beat (16th notes)
  const steps = bars * 16;

  const outputs: mm.INoteSequence[] = [];
  for (let i = 0; i < count; i++) {
    const sample = await model.continueSequence(seed, steps, temperature, undefined);
    // de-quantize back to seconds with tempo
    sample.tempos = [{ qpm: bpm }];
    outputs.push(sample);
  }

  return outputs.map(toEditorNotes);
}


--------------------------------------------------
File End
--------------------------------------------------


src\utils\previewPlayer.ts
File type: .ts
// src/utils/previewPlayer.ts
import * as Tone from "tone";

export type PlainNote = {
  pitch: number;      // MIDI (0-127)
  time: number;       // beats
  duration: number;   // beats
  velocity?: number;  // 0..127
};

export type PreviewHandle = {
  stop: () => void;
  isStopped: () => boolean;
};

const activeById = new Map<string, PreviewHandle>();

/**
 * Plays a small set of notes using a private PolySynth.
 * - Uses Tone.now() + setTimeout scheduling (doesn't start Tone.Transport)
 * - Stops any previous preview for the same clip id
 */
export function playPreview(
  clipId: string,
  notes: PlainNote[],
  bpm: number,
  onEnded?: () => void
): PreviewHandle {
  // stop any existing preview for this clip
  activeById.get(clipId)?.stop();

  const synth = new Tone.PolySynth(Tone.Synth, {
    oscillator: { type: "triangle" },
    volume: -6,
    envelope: { attack: 0.005, decay: 0.1, sustain: 0.2, release: 0.2 },
  }).toDestination();

  const msPerBeat = 60000 / bpm;
  const timeouts: number[] = [];
  let stopped = false;

  // schedule notes against the wall clock
  notes.forEach((n) => {
    const whenMs = n.time * msPerBeat;
    const durSec = (n.duration * msPerBeat) / 1000;
    const vel = Math.min(1, Math.max(0, (n.velocity ?? 90) / 127));

    const id = window.setTimeout(() => {
      if (stopped) return;
      const freq = Tone.Frequency(n.pitch, "midi");
      synth.triggerAttackRelease(freq, durSec, undefined, vel);
    }, Math.max(0, whenMs));
    timeouts.push(id);
  });

  // auto-stop after clip length
  const endBeat = notes.reduce((m, n) => Math.max(m, n.time + n.duration), 0);
  const endId = window.setTimeout(() => {
    if (stopped) return;
    stopped = true;
    synth.dispose();
    onEnded?.();
    activeById.delete(clipId);
  }, Math.max(0, endBeat * msPerBeat + 50));
  timeouts.push(endId);

  const handle: PreviewHandle = {
    stop: () => {
      if (stopped) return;
      stopped = true;
      timeouts.forEach(clearTimeout);
      synth.releaseAll();
      synth.dispose();
      onEnded?.();
      activeById.delete(clipId);
    },
    isStopped: () => stopped,
  };

  activeById.set(clipId, handle);
  return handle;
}

/** Stop ALL running previews (e.g., when leaving the page) */
export function stopAllPreviews() {
  activeById.forEach((h) => h.stop());
  activeById.clear();
}


--------------------------------------------------
File End
--------------------------------------------------


src\utils\validateForm.ts
File type: .ts


--------------------------------------------------
File End
--------------------------------------------------
