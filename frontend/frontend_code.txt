Folder Structure
--------------------------------------------------
src/
    App.tsx
    main.tsx
    components/
        auth/
            AuthInputField.tsx
            AuthToggle.tsx
            GoogleAuthButton.tsx
            GuestLogin.tsx
            LoginForm.tsx
            PasswordToggle.tsx
            SignUpForm.tsx
            SubmitButton.tsx
        dashboard/
            FolderStructure.tsx
            NewFolderButton.tsx
            NewProjectButton.tsx
            ProjectActions.tsx
            ProjectCard.tsx
            ProjectList.tsx
            SearchBar.tsx
            SortDropdown.tsx
            SortTabs.tsx
            UserDropdown.tsx
        home/
            FeatureCard.tsx
            FeatureList.tsx
            Footer.tsx
            HeroSection.css
            HeroSection.tsx
            NavBar.tsx
            StepGuide.tsx
            UserTypes.tsx
        shared/
            Button.tsx
            Dropdown.tsx
            InputField.tsx
            LoadingSpinner.tsx
            Modal.tsx
            OpenProjectModal.tsx
            ProtectedRoute.tsx
            SaveAsModal.tsx
            ToggleSwitch.tsx
            Tooltip.tsx
        workspace/
            AIDock.tsx
            AIGenerate.tsx
            AIModify.tsx
            AIStyleTransfer.tsx
            AIToolsPanel.tsx
            EditMenu.tsx
            FileMenu.tsx
            MIDIToolsMenu.tsx
            SettingsMenu.tsx
            SoundLibraryMenu.tsx
            SoundLibraryModal.tsx
            WorkspaceNavBar.tsx
            midi-editor/
                components/
                    PianoRoll/
                        PianoRoll.css
                        PianoRoll.tsx
                    TrackDashboard/
                        TrackDashboard.css
                        TrackDashboard.tsx
                    TrackEditor/
                        TrackEditor.tsx
                    TransportBar/
                        GlobalTransportBar.css
                        GlobalTransportBar.tsx
                core/
                    editorBus.ts
                    exportMidi.ts
                    importMidi.ts
                    MidiEditorCore.tsx
                    midiUtils.ts
                    TransportContext.tsx
    config/
        apiConfig.ts
        appConfig.ts
    context/
        authStore.ts
        midiStore.ts
    hooks/
        useAuth.ts
        useMIDI.ts
        useProjects.ts
    pages/
        AuthPage.tsx
        DashboardPage.tsx
        HomePage.tsx
        WorkspacePage.tsx
    services/
        aiService.ts
        authService.ts
        midiService.ts
        projectService.ts
        userService.ts
    styles/
        auth.module.css
        dashboard.module.css
        globals.css
        LoadingSpinner.css
        ToggleSwitch.css
        workspace.module.css
    types/
        projectTypes.ts
    utils/
        constants.ts
        exportProject.ts
        formatDate.ts
        generateMIDI.ts
        instruments.ts
        validateForm.ts


File Contents
--------------------------------------------------


src\App.tsx
File type: .tsx
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import AuthPage from "./pages/AuthPage";
import HomePage from "./pages/HomePage";
import DashboardPage from "./pages/DashboardPage";
import WorkspacePage from "./pages/WorkspacePage";
import ProtectedRoute from "./components/shared/ProtectedRoute"; // make sure path is correct

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<HomePage />} />
        <Route path="/auth" element={<AuthPage />} />
        <Route
          path="/dashboard"
          element={
            <ProtectedRoute>
              <DashboardPage />
            </ProtectedRoute>
          }
        />
        <Route
          path="/workspace"
          element={
            <ProtectedRoute>
              <WorkspacePage />
            </ProtectedRoute>
          }
        />
      </Routes>
    </Router>
  );
}

export default App;


--------------------------------------------------
File End
--------------------------------------------------


src\main.tsx
File type: .tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { Toaster } from 'react-hot-toast';
import "./styles/globals.css";

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
    <Toaster position="top-center" reverseOrder={false} />
  </React.StrictMode>,
);


--------------------------------------------------
File End
--------------------------------------------------


src\components\auth\AuthInputField.tsx
File type: .tsx
import React from "react";

interface AuthInputFieldProps {
  type: string;
  placeholder: string;
  value: string;
  onChange: (value: string) => void;
}

const AuthInputField: React.FC<AuthInputFieldProps> = ({ type, placeholder, value, onChange }) => {
  return (
    <input
      type={type}
      placeholder={placeholder}
      value={value}
      onChange={(e) => onChange(e.target.value)}
      className="w-full p-2 border border-gray-300 rounded mb-2"
    />
  );
};

export default AuthInputField;

--------------------------------------------------
File End
--------------------------------------------------


src\components\auth\AuthToggle.tsx
File type: .tsx
import React from "react";

interface AuthToggleProps {
  isLogin: boolean;
  setIsLogin: (value: boolean) => void;
}

const AuthToggle: React.FC<AuthToggleProps> = ({ isLogin, setIsLogin }) => {
  return (
    <div className="flex mb-4">
      <button
        className={`w-1/2 py-2 ${isLogin ? "bg-blue-500 text-white" : "bg-gray-200"}`}
        onClick={() => setIsLogin(true)}
      >
        Log in
      </button>
      <button
        className={`w-1/2 py-2 ${!isLogin ? "bg-blue-500 text-white" : "bg-gray-200"}`}
        onClick={() => setIsLogin(false)}
      >
        Sign up
      </button>
    </div>
  );
};

export default AuthToggle;

--------------------------------------------------
File End
--------------------------------------------------


src\components\auth\GoogleAuthButton.tsx
File type: .tsx
import React from "react";

const GoogleAuthButton: React.FC = () => {
  return (
    <button className="w-full p-2 mt-2 bg-red-500 text-white rounded">
      Continue with Google
    </button>
  );
};

export default GoogleAuthButton;

--------------------------------------------------
File End
--------------------------------------------------


src\components\auth\GuestLogin.tsx
File type: .tsx
import React from "react";

const GuestLogin: React.FC = () => {
  return (
    <button className="w-full p-2 mt-2 bg-gray-400 text-white rounded">
      Continue as Guest
    </button>
  );
};

export default GuestLogin;

--------------------------------------------------
File End
--------------------------------------------------


src\components\auth\LoginForm.tsx
File type: .tsx
import React, { useState } from "react";
import AuthInputField from "./AuthInputField";
import PasswordToggle from "./PasswordToggle";
import GoogleAuthButton from "./GoogleAuthButton";
import SubmitButton from "./SubmitButton";
import GuestLogin from "./GuestLogin";
import { useAuth } from "../../hooks/useAuth";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";

const LoginForm: React.FC = () => {
  const [username, setUsername] = useState<string>("");
  const [password, setPassword] = useState<string>("");

  const { login } = useAuth();
  const navigate = useNavigate();

  const handleLogin = async () => {
    const loadingToast = toast.loading("Logging in...");
    try {
      await login(username, password);
      toast.success("Logged in successfully!", { id: loadingToast });
      navigate("/dashboard");
    } catch (error: any) {
      toast.error("Login failed: " + (error.response?.data?.detail || error.message), {
        id: loadingToast,
      });
    }
  };

  return (
    <div>
      <AuthInputField type="text" placeholder="Username" value={username} onChange={setUsername} />
      <PasswordToggle value={password} onChange={setPassword} />
      <SubmitButton text="Log in" onClick={handleLogin} />
      <GoogleAuthButton />
      <GuestLogin />
    </div>
  );
};

export default LoginForm;


--------------------------------------------------
File End
--------------------------------------------------


src\components\auth\SignUpForm.tsx
File type: .tsx
import React, { useState } from "react";
import AuthInputField from "./AuthInputField";
import PasswordToggle from "./PasswordToggle";
import GoogleAuthButton from "./GoogleAuthButton";
import SubmitButton from "./SubmitButton";
import { useAuth } from "../../hooks/useAuth";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";

const SignUpForm: React.FC = () => {
  const [username, setUsername] = useState<string>("");
  const [password, setPassword] = useState<string>("");
  const [confirmPassword, setConfirmPassword] = useState<string>("");

  const { register } = useAuth();
  const navigate = useNavigate();

  const handleRegister = async () => {
    if (password !== confirmPassword) {
      toast.error("Passwords do not match!");
      return;
    }

    const loadingToast = toast.loading("Creating account...");
    try {
      await register(username, password);
      toast.success("Account created and logged in!", { id: loadingToast });
      navigate("/dashboard");
    } catch (error: any) {
      toast.error("Signup failed: " + (error.response?.data?.detail || error.message), {
        id: loadingToast,
      });
    }
  };

  return (
    <div>
      <AuthInputField type="text" placeholder="Username" value={username} onChange={setUsername} />
      <PasswordToggle value={password} onChange={setPassword} />
      <PasswordToggle value={confirmPassword} onChange={setConfirmPassword} />
      <SubmitButton text="Sign up" onClick={handleRegister} />
      <GoogleAuthButton />
    </div>
  );
};

export default SignUpForm;


--------------------------------------------------
File End
--------------------------------------------------


src\components\auth\SubmitButton.tsx
File type: .tsx
import React from "react";

interface SubmitButtonProps {
  text: string;
  onClick: () => void;
}

const SubmitButton: React.FC<SubmitButtonProps> = ({ text, onClick }) => {
  return (
    <button className="w-full p-2 mt-2 bg-blue-500 text-white rounded" onClick={onClick}>
      {text}
    </button>
  );
};

export default SubmitButton;

--------------------------------------------------
File End
--------------------------------------------------


src\components\dashboard\NewFolderButton.tsx
File type: .tsx
import React from "react";
import { Plus } from "lucide-react";

const NewFolderButton: React.FC = () => (
  <button
    onClick={() => alert("Create folder…")}
    className="
      flex items-center space-x-2
      px-6 py-3
      bg-teal-400 hover:bg-teal-500
      text-black font-semibold
      rounded-full shadow
      text-sm
    "
  >
    <div className="bg-white rounded-full p-1">
      <Plus className="w-4 h-4" />
    </div>
    <span>Create new folder</span>
  </button>
);

export default NewFolderButton;


--------------------------------------------------
File End
--------------------------------------------------


src\components\dashboard\NewProjectButton.tsx
File type: .tsx
import React from "react";
import { Plus } from "lucide-react";
import { useProjects } from "../../hooks/useProjects";

const NewProjectButton: React.FC = () => {
  const { addProject } = useProjects();

  const handleClick = async () => {
    const name = "Untitled Project";
    const data = { notes: [], bpm: 120 };
    await addProject(name, data);
    window.location.reload();
  };

  return (
    <button
      onClick={handleClick}
      className="
        flex items-center space-x-2
        px-6 py-3
        bg-teal-400 hover:bg-teal-500
        text-black font-semibold
        rounded-full shadow
        text-sm
      "
    >
      <div className="bg-white rounded-full p-1">
        <Plus className="w-4 h-4" />
      </div>
      <span>Create new project</span>
    </button>
  );
};

export default NewProjectButton;


--------------------------------------------------
File End
--------------------------------------------------


src\components\dashboard\ProjectList.tsx
File type: .tsx
import React from "react";
import FolderStructure from "./FolderStructure";

const mockProjects = [
  { id: "1", name: "Untitled", createdAt: "21/03/2025", duration: "00:00", folderId: null },
  { id: "2", name: "Untitled", createdAt: "21/03/2025", duration: "00:00", folderId: "f1" },
];

const mockFolders = [
  { id: "f1", name: "Folder A" },
  { id: "f2", name: "Folder B" },
];

const ProjectList: React.FC = () => {
  return <FolderStructure projects={mockProjects} folders={mockFolders} />;
};

export default ProjectList;

--------------------------------------------------
File End
--------------------------------------------------


src\components\dashboard\SearchBar.tsx
File type: .tsx
import React from "react";

interface SearchBarProps {
  value: string;
  onChange: (v: string) => void;
}

const SearchBar: React.FC<SearchBarProps> = ({ value, onChange }) => (
  <input
    type="text"
    placeholder="Search projects…"
    value={value}
    onChange={e => onChange(e.target.value)}
    className="
      w-full
      px-4 py-2
      rounded-full
      border border-gray-300
      bg-gray-100
      focus:outline-none focus:ring-2 focus:ring-teal-400
      text-sm
    "
  />
);

export default SearchBar;


--------------------------------------------------
File End
--------------------------------------------------


src\components\dashboard\SortDropdown.tsx
File type: .tsx
import React from "react";

const SortDropdown: React.FC = () => {
  return (
    <select className="border rounded px-2 py-1">
      <option value="created">Created</option>
      <option value="name">Name</option>
      <option value="modified">Modified</option>
    </select>
  );
};

export default SortDropdown;

--------------------------------------------------
File End
--------------------------------------------------


src\components\dashboard\SortTabs.tsx
File type: .tsx
import React from "react";

export type SortKey = "created" | "custom" | "modified";

interface SortTabsProps {
  selected: SortKey;
  onSelect: (key: SortKey) => void;
}

const SortTabs: React.FC<SortTabsProps> = ({ selected, onSelect }) => (
  <div className="flex space-x-2">
    {(["created", "custom", "modified"] as SortKey[]).map((key) => (
      <button
        key={key}
        onClick={() => onSelect(key)}
        className={
          "px-3 py-1 rounded-full text-sm " +
          (selected === key
            ? "bg-gray-200 font-semibold"
            : "hover:bg-gray-100")
        }
      >
        {key.charAt(0).toUpperCase() + key.slice(1)}
      </button>
    ))}
  </div>
);

export default SortTabs;


--------------------------------------------------
File End
--------------------------------------------------


src\components\dashboard\UserDropdown.tsx
File type: .tsx
import React, { useState } from "react";

const UserDropdown: React.FC = () => {
  const [open, setOpen] = useState(false);

  return (
    <div className="relative inline-block text-left">
      <button
        onClick={() => setOpen(!open)}
        className="border rounded-full px-3 py-2 bg-cyan-300"
      >
        Username ▼
      </button>

      {open && (
        <div className="absolute right-0 mt-2 w-48 bg-white border rounded shadow-lg">
          <button className="block px-4 py-2 w-full text-left hover:bg-gray-100">
            Switch Account
          </button>
          <button className="block px-4 py-2 w-full text-left hover:bg-gray-100">
            Sign Out
          </button>
        </div>
      )}
    </div>
  );
};

export default UserDropdown;

--------------------------------------------------
File End
--------------------------------------------------


src\components\home\FeatureCard.tsx
File type: .tsx
import React from "react";

interface FeatureCardProps {
  title: string;
  description: string;
}

const FeatureCard: React.FC<FeatureCardProps> = ({ title, description }) => {
  return (
    <div className="p-4 border rounded shadow">
      <h3 className="text-xl font-bold">{title}</h3>
      <p className="text-sm">{description}</p>
    </div>
  );
};

export default FeatureCard;


--------------------------------------------------
File End
--------------------------------------------------


src\components\home\FeatureList.tsx
File type: .tsx
import React, { useState } from "react";

const features = [
  {
    title: "AI-powered MIDI generation",
    description:
      "Generate melodies, chords, and rhythms from a simple prompt. Pick a style or vibe—let AI draft your starting point in seconds.",
  },
  {
    title: "Precise MIDI editing",
    description:
      "Adjust note length, timing, velocity, and articulation with snap-to-grid and power tools.",
  },
  {
    title: "Import & refine MIDI",
    description:
      "Bring in your .mid files, combine, clean up, and create multi‑track arrangements.",
  },
  {
    title: "Assign custom sounds",
    description:
      "Use your own samples or instruments for each track to nail the exact tone.",
  },
];

const FeatureList: React.FC = () => {
  const [openIndex, setOpenIndex] = useState<number>(0);

  return (
    <section className="px-4 sm:px-6 lg:px-10 pt-10 sm:pt-14">
      <h2 className="text-[28px] sm:text-[34px] font-extrabold tracking-tight mb-6">
        <span className="text-[#1b1b1b]/80">What</span>{" "}
        <span className="text-[#ff5200]">can MIDIMIJAI</span>{" "}
        <span className="text-[#1b1b1b]/80">do?</span>
      </h2>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start">
        {/* Left: accordion cards */}
        <div className="space-y-4">
          {features.map((f, i) => {
            const open = i === openIndex;
            return (
              <div
                key={f.title}
                className="bg-white border border-black/10 rounded-xl shadow-sm overflow-hidden"
              >
                <button
                  className="w-full flex items-center justify-between text-left px-5 py-4"
                  onClick={() => setOpenIndex(open ? -1 : i)}
                >
                  <span className="font-semibold text-[17px]">{f.title}</span>
                  <span className="text-xl select-none">{open ? "▲" : "▼"}</span>
                </button>
                {open && (
                  <div className="px-5 pb-5 -mt-1 text-[15px] text-[#1b1b1b]/70">
                    {f.description}
                  </div>
                )}
              </div>
            );
          })}
        </div>

        {/* Right: demo placeholder with beige blob behind */}
        <div className="relative">
          <div className="absolute -top-10 -right-6 w-64 h-40 bg-[#decab2] rounded-[32px] shadow-[0_16px_40px_rgba(0,0,0,0.1)] -z-10" />
          <div className="w-full h-64 sm:h-72 bg-white border border-black/10 rounded-2xl flex items-center justify-center text-sm text-black/50 shadow-sm">
            [Demo clip area]
          </div>
        </div>
      </div>
    </section>
  );
};

export default FeatureList;


--------------------------------------------------
File End
--------------------------------------------------


src\components\home\Footer.tsx
File type: .tsx
import React from "react";

const Footer: React.FC = () => {
  return (
    <footer className="mt-10 bg-[#efe6dc]">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-10 py-8">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-6 text-[13px]">
          <div>
            <h4 className="font-semibold mb-2">Company</h4>
            <p>About us</p>
            <p>Contact</p>
          </div>
          <div>
            <h4 className="font-semibold mb-2">Platform</h4>
            <p>Pricing</p>
            <p>FAQs</p>
          </div>
          <div>
            <h4 className="font-semibold mb-2">Support</h4>
            <p>Terms of Service</p>
          </div>
          <div>
            <h4 className="font-semibold mb-2">Legal & Policies</h4>
            <p>Privacy Policy</p>
            <p>Cookie Policy</p>
            <p>User Agreements</p>
          </div>
        </div>
        <p className="text-[12px] text-black/60 mt-6">
          © {new Date().getFullYear()} MIDIMIJAI. All rights reserved.
        </p>
      </div>
    </footer>
  );
};

export default Footer;


--------------------------------------------------
File End
--------------------------------------------------


src\components\home\HeroSection.css
File type: .css
/* HeroSection.css */
.hero {
  position: relative;
  width: 100%;
  background-color: #e2cfb5; /* exact design color */
  text-align: center;
  padding: 3rem 1rem 6rem;
  overflow: hidden;
}

.hero-logo {
  width: 280px; /* bigger logo */
  margin-bottom: 1.5rem;
}

.hero-text-box {
  background-color: #e9dbc7;
  display: inline-block;
  padding: 1rem 2rem;
  border-radius: 12px;
  box-shadow: 0 8px 20px rgba(0,0,0,0.15);
  margin-bottom: 1.5rem;
  max-width: 700px;
}

.hero-text-box p {
  font-size: 1rem;
  line-height: 1.5;
}

.hero-btn {
  background-color: #ff5a00;
  color: white;
  font-size: 1.1rem;
  padding: 0.75rem 2rem;
  border: none;
  cursor: pointer;
  border-radius: 4px;
  box-shadow: 0 8px 20px rgba(0,0,0,0.15);
}

.hero-btn:hover {
  background-color: #e84f00;
}

.hero-wave {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 120px;
  background: url('/wave-shape.svg') no-repeat bottom;
  background-size: cover;
}


--------------------------------------------------
File End
--------------------------------------------------


src\components\home\NavBar.tsx
File type: .tsx
import React from "react";
import { useNavigate } from "react-router-dom";

const Navbar: React.FC = () => {
  const navigate = useNavigate();

  return (
    <nav className="w-full flex items-center justify-between px-4 sm:px-6 lg:px-8 py-3">
      {/* Logo tiny (top-left corner like figma) */}
      <img
        src="/MIDIMIJAI-LOGO.png"
        alt="MIDIMIJAI"
        className="h-5 w-auto"
      />

      <div className="flex items-center gap-2 sm:gap-3">
        <button className="text-xs sm:text-[12px] border border-[#1b1b1b] rounded-md px-3 py-1 bg-white/60">
          EN / TH
        </button>
        <button
          onClick={() => navigate("/auth")}
          className="text-xs sm:text-[12px] border border-[#1b1b1b] rounded-md px-3 py-1 bg-white/60"
        >
          Login
        </button>
      </div>
    </nav>
  );
};

export default Navbar;


--------------------------------------------------
File End
--------------------------------------------------


src\components\home\StepGuide.tsx
File type: .tsx
import React, { useState } from "react";

const steps = [
  {
    title: "Step 1: Type a prompt",
    description: "Describe mood or style; AI drafts your MIDI idea.",
  },
  {
    title: "Step 2: Refine in the editor",
    description: "Edit notes, timing, and dynamics with precise tools.",
  },
  {
    title: "Step 3: Assign custom sounds",
    description: "Swap instruments or upload your own samples.",
  },
  {
    title: "Step 4: Export",
    description: "Download as .mid and use in any DAW.",
  },
];

const StepGuide: React.FC = () => {
  const [openIndex, setOpenIndex] = useState<number>(0);

  return (
    <section className="px-4 sm:px-6 lg:px-10 pt-14">
      <div className="flex items-baseline gap-2 mb-6">
        <h2 className="text-[28px] sm:text-[34px] font-extrabold">
          Step <span className="text-[#1b1b1b]/80">by step</span>{" "}
          <span className="text-[#ff5200]">Guide</span>
        </h2>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start">
        {/* Left: mini-demo area with corner blob */}
        <div className="relative">
          <div className="absolute -top-10 -left-6 w-64 h-40 bg-[#decab2] rounded-[32px] shadow-[0_16px_40px_rgba(0,0,0,0.1)] -z-10" />
          <div className="w-full h-72 bg-white border border-black/10 rounded-2xl flex items-center justify-center text-sm text-black/50 shadow-sm">
            [Mini demo area]
          </div>
        </div>

        {/* Right: steps accordion */}
        <div className="space-y-4">
          {steps.map((s, i) => {
            const open = i === openIndex;
            return (
              <div
                key={s.title}
                className="bg-white border border-black/10 rounded-xl shadow-sm overflow-hidden"
              >
                <button
                  className="w-full flex items-center justify-between text-left px-5 py-4"
                  onClick={() => setOpenIndex(open ? -1 : i)}
                >
                  <span className="font-semibold text-[17px]">{s.title}</span>
                  <span className="text-xl select-none">{open ? "▲" : "▼"}</span>
                </button>
                {open && (
                  <div className="px-5 pb-5 -mt-1 text-[15px] text-[#1b1b1b]/70">
                    {s.description}
                  </div>
                )}
              </div>
            );
          })}
        </div>
      </div>
    </section>
  );
};

export default StepGuide;


--------------------------------------------------
File End
--------------------------------------------------


src\components\home\UserTypes.tsx
File type: .tsx
import React from "react";

const cards = [
  {
    title: "For Beginners",
    img: "/Beginner.png",
    blurb: "Start quick with AI‑assisted ideas.",
  },
  {
    title: "For Producers",
    img: "/Producer.png",
    blurb: "Draft hooks, chords, and beats faster.",
  },
  {
    title: "For Musicians",
    img: "/Musician.png",
    blurb: "Shape melodies and harmonies with precision.",
  },
];

const UserTypes: React.FC = () => {
  return (
    <section className="px-4 sm:px-6 lg:px-10 pt-14 pb-6">
      <h2 className="text-center text-[30px] sm:text-[36px] font-extrabold mb-8">
        Who is this <span className="text-[#ff5200]">for?</span>
      </h2>

      <div className="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-6">
        {cards.map((c) => (
          <div
            key={c.title}
            className="bg-white rounded-2xl shadow-[0_12px_30px_rgba(255,122,0,0.15)] p-8 flex flex-col items-center text-center border border-black/5"
          >
            <div className="relative w-40 h-40 mb-5">
              <div className="absolute inset-0 rounded-full bg-[#ff5200]/10 blur-2xl" />
              <img
                src={c.img}
                alt={c.title}
                className="relative mx-auto h-40 w-auto object-contain"
              />
            </div>
            <h3 className="font-bold text-lg mb-1">{c.title}</h3>
            <p className="text-sm text-black/60">{c.blurb}</p>
          </div>
        ))}
      </div>
    </section>
  );
};

export default UserTypes;


--------------------------------------------------
File End
--------------------------------------------------


src\components\shared\Button.tsx
File type: .tsx
import React from "react";

interface ButtonProps {
  text: string;
  onClick: () => void;
  disabled?: boolean;
  className?: string;
}

const Button: React.FC<ButtonProps> = ({ text, onClick, disabled, className }) => {
  return (
    <button
      onClick={onClick}
      disabled={disabled}
      className={`px-4 py-2 rounded ${className}`}
    >
      {text}
    </button>
  );
};

export default Button;

--------------------------------------------------
File End
--------------------------------------------------


src\components\shared\Dropdown.tsx
File type: .tsx
import React, { useState, useEffect, useRef } from 'react';

interface DropdownProps {
  label: string;
  options: string[];
}

const Dropdown: React.FC<DropdownProps> = ({ label, options }) => {
  const [open, setOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  // Close dropdown on outside click
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node)
      ) {
        setOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <div ref={dropdownRef} style={{ position: 'relative', display: 'inline-block' }}>
      <button onClick={() => setOpen((prev) => !prev)}>{label}</button>
      {open && (
        <div
          style={{
            position: 'absolute',
            background: 'white',
            border: '1px solid #ccc',
            marginTop: '0.5rem',
            zIndex: 10,
            whiteSpace: 'nowrap',
          }}
        >
          {options.map((opt, i) => (
            <div
              key={i}
              style={{
                padding: '0.5rem 1rem',
                cursor: 'pointer',
                userSelect: 'none',
              }}
              onClick={() => {
                console.log(`Selected: ${opt}`);
                setOpen(false);
              }}
            >
              {opt}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default Dropdown;

--------------------------------------------------
File End
--------------------------------------------------


src\components\shared\InputField.tsx
File type: .tsx
import React from "react";

interface InputFieldProps {
  type: string;
  placeholder: string;
  value: string;
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  className?: string;
}

const InputField: React.FC<InputFieldProps> = ({ type, placeholder, value, onChange, className }) => {
  return (
    <input
      type={type}
      placeholder={placeholder}
      value={value}
      onChange={onChange}
      className={`px-4 py-2 border rounded ${className}`}
    />
  );
};

export default InputField;

--------------------------------------------------
File End
--------------------------------------------------


src\components\shared\LoadingSpinner.tsx
File type: .tsx
import React from 'react';
import '../../styles/LoadingSpinner.css';

const LoadingSpinner = () => {
  return <div className="loading-spinner"></div>;
};

export default LoadingSpinner;

--------------------------------------------------
File End
--------------------------------------------------


src\components\shared\Modal.tsx
File type: .tsx
import React from 'react';

interface ModalProps {
  onClose: () => void;
  children: React.ReactNode;
}

const Modal: React.FC<ModalProps> = ({ onClose, children }) => {
  return (
    <div
      style={{
        position: 'fixed',
        top: 0, left: 0, right: 0, bottom: 0,
        backgroundColor: 'rgba(0,0,0,0.4)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: 1000,
      }}
      onClick={onClose}
    >
      <div
        style={{
          background: 'white',
          padding: '2rem',
          borderRadius: '8px',
          minWidth: '300px',
        }}
        onClick={(e) => e.stopPropagation()}
      >
        <button onClick={onClose} style={{ float: 'right' }}>X</button>
        {children}
      </div>
    </div>
  );
};

export default Modal;

--------------------------------------------------
File End
--------------------------------------------------


src\components\shared\OpenProjectModal.tsx
File type: .tsx
import React, { useEffect, useState } from "react";
import Modal from "./Modal";
import { getAllProjects } from "../../services/projectService";

interface OpenProjectModalProps {
  isOpen: boolean;
  onSelect: (projectId: number) => void;
  onCancel: () => void;
}

export default function OpenProjectModal({
  isOpen,
  onSelect,
  onCancel,
}: OpenProjectModalProps) {
  const [projects, setProjects] = useState<{ id: number; name: string }[]>([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (!isOpen) return;
    setLoading(true);
    getAllProjects()
      .then((list) =>
        setProjects(list.map((p: any) => ({ id: p.id, name: p.name })))
      )
      .catch(console.error)
      .finally(() => setLoading(false));
  }, [isOpen]);

  if (!isOpen) return null;

  return (
    <Modal title="Open Project" onClose={onCancel}>
      {loading ? (
        <p>Loading…</p>
      ) : (
        <ul className="max-h-60 overflow-auto space-y-2">
          {projects.map((proj) => (
            <li key={proj.id}>
              <button
                onClick={() => onSelect(proj.id)}
                className="w-full text-left px-3 py-2 rounded hover:bg-gray-100"
              >
                {proj.name}
              </button>
            </li>
          ))}
        </ul>
      )}
      <div className="flex justify-end mt-4">
        <button onClick={onCancel} className="px-4 py-2">
          Cancel
        </button>
      </div>
    </Modal>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


src\components\shared\ProtectedRoute.tsx
File type: .tsx
import React, { ReactElement } from "react";
import { Navigate } from "react-router-dom";
import { useAuth } from "../../hooks/useAuth";

interface ProtectedRouteProps {
  children: ReactElement;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
  const { isLoggedIn } = useAuth();

  if (!isLoggedIn) {
    return <Navigate to="/auth" replace />;
  }

  return children;
};

export default ProtectedRoute;


--------------------------------------------------
File End
--------------------------------------------------


src\components\shared\SaveAsModal.tsx
File type: .tsx
import React, { useEffect, useState } from "react";
import Modal from "./Modal";

interface SaveAsModalProps {
  isOpen: boolean;
  initialName: string;
  onSave: (newName: string) => void;
  onCancel: () => void;
}

export default function SaveAsModal({
  isOpen,
  initialName,
  onSave,
  onCancel,
}: SaveAsModalProps) {
  const [name, setName] = useState(initialName);

  useEffect(() => {
    if (isOpen) {
      setName(initialName);
    }
  }, [isOpen, initialName]);

  if (!isOpen) return null;

  return (
    <Modal title="Save Project As…" onClose={onCancel}>
      <input
        type="text"
        value={name}
        onChange={(e) => setName(e.target.value)}
        className="w-full px-3 py-2 border rounded mb-4"
      />
      <div className="flex justify-end space-x-2">
        <button onClick={onCancel} className="px-4 py-2">
          Cancel
        </button>
        <button
          onClick={() => onSave(name)}
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Save
        </button>
      </div>
    </Modal>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


src\components\shared\ToggleSwitch.tsx
File type: .tsx
import React from "react";

interface ToggleSwitchProps {
  isOn: boolean;
  handleToggle: () => void;
}

const ToggleSwitch: React.FC<ToggleSwitchProps> = ({ isOn, handleToggle }) => {
  return (
    <label className="cursor-pointer flex items-center space-x-2">
      <input 
        type="checkbox" 
        checked={isOn} 
        onChange={handleToggle} 
        className="hidden"
      />
      <span 
        className="w-6 h-6 border border-black flex items-center justify-center text-lg"
      >
        {isOn ? "On" : "Off"}
      </span>
    </label>
  );
};

export default ToggleSwitch;

--------------------------------------------------
File End
--------------------------------------------------


src\components\shared\Tooltip.tsx
File type: .tsx
import React from "react";
import { Tooltip as ReactTooltip } from "react-tooltip";
import "react-tooltip/dist/react-tooltip.css";

interface TooltipProps {
  text: string;
  children: React.ReactNode;
}

const Tooltip: React.FC<TooltipProps> = ({ text, children }) => {
  return (
    <>
      <span data-tooltip-id="tooltip" data-tooltip-content={text}>
        {children}
      </span>
      <ReactTooltip id="tooltip" />
    </>
  );
};

export default Tooltip;


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\AIDock.tsx
File type: .tsx
import React, { useState } from "react";
import AIGenerate from "./AIGenerate";
import AIModify from "./AIModify";
import AIStyleTransfer from "./AIStyleTransfer";

type Tab = "Generate" | "Modify" | "Style";

export default function AIDock() {
  const [tab, setTab] = useState<Tab>("Generate");

  return (
    <aside className="w-full lg:w-96 border-l bg-white">
      <div className="px-4 py-3 border-b flex items-center justify-between">
        <h3 className="text-sm font-semibold">AI Tools</h3>
        <div className="flex gap-2">
          {(["Generate", "Modify", "Style"] as Tab[]).map((t) => (
            <button
              key={t}
              onClick={() => setTab(t)}
              className={`px-2 py-1 text-xs rounded ${
                tab === t ? "bg-teal-500 text-white" : "hover:bg-gray-100"
              }`}
            >
              {t}
            </button>
          ))}
        </div>
      </div>

      <div className="p-4">
        {tab === "Generate" && <AIGenerate />}
        {tab === "Modify" && <AIModify />}
        {tab === "Style" && <AIStyleTransfer />}
      </div>
    </aside>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\AIModify.tsx
File type: .tsx
import React, { useState } from "react";
import { postAIGenerate } from "../../services/aiService";

export default function AIModify() {
  const [prompt, setPrompt] = useState("");
  const [loading, setLoading] = useState(false);
  const [output, setOutput] = useState("");

  const handleSuggestions = async () => {
    setLoading(true);
    try {
      const resp = await postAIGenerate({ prompt, mode: "modify-suggest" });
      setOutput((resp.suggestions || []).join("\n"));
    } finally {
      setLoading(false);
    }
  };

  const handleModify = async () => {
    setLoading(true);
    try {
      const resp = await postAIGenerate({ prompt, mode: "modify" });
      // For now, backend returns {data} shaped like project
      setOutput(resp.data ? "Modified data generated" : "No data");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-2">
      <h4 className="text-lg font-semibold">AI Modify</h4>
      <input
        value={prompt}
        onChange={(e) => setPrompt(e.target.value)}
        placeholder="Make this jazzier…"
        className="w-full px-3 py-2 border rounded"
      />
      <div className="flex space-x-2">
        <button onClick={handleSuggestions} disabled={loading} className="flex-1 px-3 py-1 bg-orange-400 text-white rounded">
          Suggestions
        </button>
        <button onClick={handleModify} disabled={loading} className="flex-1 px-3 py-1 bg-orange-400 text-white rounded">
          Modify
        </button>
      </div>
      <textarea readOnly value={output} className="w-full h-24 p-2 border rounded resize-none" />
    </div>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\AIStyleTransfer.tsx
File type: .tsx
import React, { useState } from "react";
import { postAIGenerate } from "../../services/aiService";

export default function AIStyleTransfer() {
  const [prompt, setPrompt] = useState("");
  const [loading, setLoading] = useState(false);
  const [output, setOutput] = useState("");

  const handleSuggestions = async () => {
    setLoading(true);
    try {
      const resp = await postAIGenerate({ prompt, mode: "style-suggest" });
      setOutput((resp.suggestions || []).join("\n"));
    } finally {
      setLoading(false);
    }
  };

  const handleStyle = async () => {
    setLoading(true);
    try {
      const resp = await postAIGenerate({ prompt, mode: "style" });
      setOutput(resp.data ? "Styled data generated" : "No data");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-2">
      <h4 className="text-lg font-semibold">AI Style</h4>
      <input
        value={prompt}
        onChange={(e) => setPrompt(e.target.value)}
        placeholder="Change style to Lo-Fi…"
        className="w-full px-3 py-2 border rounded"
      />
      <div className="flex space-x-2">
        <button onClick={handleSuggestions} disabled={loading} className="flex-1 px-3 py-1 bg-orange-400 text-white rounded">
          Suggestions
        </button>
        <button onClick={handleStyle} disabled={loading} className="flex-1 px-3 py-1 bg-orange-400 text-white rounded">
          Style
        </button>
      </div>
      <textarea readOnly value={output} className="w-full h-24 p-2 border rounded resize-none" />
    </div>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\AIToolsPanel.tsx
File type: .tsx
import React, { useState } from "react";
import AIGenerate from "./AIGenerate";
import AIModify from "./AIModify";
import AIStyleTransfer from "./AIStyleTransfer";

const TABS = ["Generate", "Modify", "Style"] as const;
type Tab = typeof TABS[number];

export default function AIToolsPanel() {
  const [tab, setTab] = useState<Tab>("Generate");

  return (
    <div className="w-full">
      <div className="flex gap-2 mb-3">
        {TABS.map((t) => (
          <button
            key={t}
            onClick={() => setTab(t)}
            className={`px-3 py-1 rounded ${tab === t ? "bg-teal-500 text-white" : "bg-gray-100"}`}
          >
            {t}
          </button>
        ))}
      </div>

      <div className="space-y-4">
        {tab === "Generate" && <AIGenerate />}
        {tab === "Modify" && <AIModify />}
        {tab === "Style" && <AIStyleTransfer />}
      </div>
    </div>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\EditMenu.tsx
File type: .tsx
// frontend/src/components/workspace/EditMenu.tsx
import React from "react";

interface EditMenuProps {
  onSelect: () => void;   // close dropdown
  onUndo: () => void;
  onRedo: () => void;
  onCut: () => void;
  onCopy: () => void;
  onPaste: () => void;
  onDelete: () => void;
  onSelectAll: () => void;
}

const EditMenu: React.FC<EditMenuProps> = ({
  onSelect,
  onUndo,
  onRedo,
  onCut,
  onCopy,
  onPaste,
  onDelete,
  onSelectAll,
}) => {
  const items = [
    { label: "Undo",        shortcut: "Ctrl+Z",  action: onUndo },
    { label: "Redo",        shortcut: "Ctrl+Y",  action: onRedo },
    { separator: true },
    { label: "Cut",         shortcut: "Ctrl+X",  action: onCut },
    { label: "Copy",        shortcut: "Ctrl+C",  action: onCopy },
    { label: "Paste",       shortcut: "Ctrl+V",  action: onPaste },
    { label: "Delete",                       action: onDelete },
    { separator: true },
    { label: "Select All",  shortcut: "Ctrl+A",  action: onSelectAll },
  ] as const;

  return (
    <div className="mt-1 w-48 bg-white border border-gray-200 rounded-md shadow-lg">
      {items.map((item, i) =>
        "separator" in item ? (
          <div key={i} className="border-t border-gray-200 my-1" />
        ) : (
          <button
            key={item.label}
            onClick={() => {
              item.action();
              onSelect();
            }}
            className="flex justify-between w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
          >
            <span>{item.label}</span>
            {item.shortcut && (
              <span className="text-xs text-gray-400">{item.shortcut}</span>
            )}
          </button>
        )
      )}
    </div>
  );
};

export default EditMenu;


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\FileMenu.tsx
File type: .tsx
// src/components/workspace/FileMenu.tsx
import React from "react";

type MenuItem =
  | { separator: true }
  | {
      label: string;
      action: () => void;
      shortcut?: string;
      disabled?: boolean;
    };

interface FileMenuProps {
  onSelect: () => void;                // closes the dropdown
  onNew: () => void;
  onOpen: () => void;
  onSave: () => void;
  onSaveAs: () => void;
  onImportMidi: (file: File) => void;
  onExportMidi: () => void;
  onExportStems: () => void;
  onClose: () => void;

  /** If false, Import/Export MIDI are disabled (e.g., not in Track Editor). */
  canUseTrackActions?: boolean;
}

export default function FileMenu({
  onSelect,
  onNew,
  onOpen,
  onSave,
  onSaveAs,
  onImportMidi,
  onExportMidi,
  onExportStems,
  onClose,
  canUseTrackActions,
}: FileMenuProps) {
  // default to true if not provided
  const canUse = canUseTrackActions !== false;

  const items: MenuItem[] = [
    { label: "New Project",    shortcut: "Ctrl+N",       action: onNew },
    { label: "Open Project…",  shortcut: "Ctrl+O",       action: onOpen },
    { separator: true },
    { label: "Save",           shortcut: "Ctrl+S",       action: onSave },
    { label: "Save As…",       shortcut: "Ctrl+Shift+S", action: onSaveAs },
    { separator: true },
    {
      label: "Import MIDI",
      disabled: !canUse,
      action: () => {
        if (!canUse) return;
        const inp = document.createElement("input");
        inp.type = "file";
        inp.accept = ".mid";
        inp.onchange = () => {
          if (inp.files?.[0]) onImportMidi(inp.files[0]);
        };
        inp.click();
      },
    },
    {
      label: "Export MIDI",
      disabled: !canUse,
      action: () => {
        if (!canUse) return;
        onExportMidi();
      },
    },
    { label: "Export Stems", action: onExportStems },
    { separator: true },
    { label: "Close Project", action: onClose },
  ];

  return (
    <div className="absolute left-0 top-full mt-1 w-56 bg-white border border-gray-200 rounded-md shadow-lg z-50">
      {items.map((item, i) =>
        "separator" in item ? (
          <div key={`sep-${i}`} className="border-t border-gray-200 my-1" />
        ) : (
          <button
            key={item.label}
            onClick={() => {
              if (item.disabled) return;
              item.action();
              onSelect();
            }}
            disabled={item.disabled}
            className={
              "flex justify-between w-full px-4 py-2 text-sm focus:outline-none " +
              (item.disabled
                ? "text-gray-300 cursor-not-allowed"
                : "text-gray-700 hover:bg-gray-100")
            }
          >
            <span>{item.label}</span>
            {item.shortcut && (
              <span className="text-xs text-gray-400">{item.shortcut}</span>
            )}
          </button>
        )
      )}
    </div>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\MIDIToolsMenu.tsx
File type: .tsx
// frontend/src/components/workspace/MIDIToolsMenu.tsx
import React from "react";

interface MIDIToolsMenuProps {
  onSelect: () => void;
  onTranspose: () => void;
  onVelocity: () => void;
  onNoteLength: () => void;
  onHumanize: () => void;
  onArpeggiate: () => void;
  onStrum: () => void;
  onLegato: () => void;
}

const MIDIToolsMenu: React.FC<MIDIToolsMenuProps> = ({
  onSelect,
  onTranspose,
  onVelocity,
  onNoteLength,
  onHumanize,
  onArpeggiate,
  onStrum,
  onLegato,
}) => {
  const items = [
    { label: "Transpose",          action: onTranspose },
    { label: "Velocity Control",   action: onVelocity },
    { label: "Note Length Adjust", action: onNoteLength },
    { separator: true },
    { label: "Humanization",       action: onHumanize },
    { label: "Arpeggiator",        action: onArpeggiate },
    { label: "Strumming Effect",   action: onStrum },
    { label: "Legato/Portamento",  action: onLegato },
  ] as const;

  return (
    <div className="mt-1 w-56 bg-white border border-gray-200 rounded-md shadow-lg">
      {items.map((item, i) =>
        "separator" in item ? (
          <div key={i} className="border-t border-gray-200 my-1" />
        ) : (
          <button
            key={item.label}
            onClick={() => {
              item.action();
              onSelect();
            }}
            className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
          >
            {item.label}
          </button>
        )
      )}
    </div>
  );
};

export default MIDIToolsMenu;


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\SettingsMenu.tsx
File type: .tsx
// frontend/src/components/workspace/SettingsMenu.tsx
import React from "react";

interface SettingsMenuProps {
  onSelect: () => void;
  onKeyScaleLock: () => void;
  onAudioEngine: () => void;
  onMidiInput: () => void;
  onShortcuts: () => void;
  onGridSettings: () => void;
  onLatency: () => void;
}

const SettingsMenu: React.FC<SettingsMenuProps> = ({
  onSelect,
  onKeyScaleLock,
  onAudioEngine,
  onMidiInput,
  onShortcuts,
  onGridSettings,
  onLatency,
}) => {
  const items = [
    { label: "Key / Scale Lock…", action: onKeyScaleLock },
    { label: "Audio Engine…",     action: onAudioEngine },
    { label: "MIDI Input…",       action: onMidiInput },
    { separator: true },
    { label: "Editor Shortcuts",  action: onShortcuts },
    { label: "Grid / Snap",       action: onGridSettings },
    { label: "Latency / Buffer",  action: onLatency },
  ] as const;

  return (
    <div className="mt-1 w-56 bg-white border border-gray-200 rounded-md shadow-lg">
      {items.map((item, i) =>
        "separator" in item ? (
          <div key={i} className="border-t border-gray-200 my-1" />
        ) : (
          <button
            key={item.label}
            onClick={() => {
              item.action();
              onSelect();
            }}
            className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
          >
            {item.label}
          </button>
        )
      )}
    </div>
  );
};

export default SettingsMenu;


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\SoundLibraryMenu.tsx
File type: .tsx
// frontend/src/components/workspace/SoundLibraryMenu.tsx
import React from "react";

interface SoundLibraryMenuProps {
  onSelect: () => void;      // close dropdown
  onUploadSound: () => void; // open modal
}

const SoundLibraryMenu: React.FC<SoundLibraryMenuProps> = ({
  onSelect,
  onUploadSound,
}) => {
  const items = [
    { label: "Upload sound…", action: onUploadSound },
    // Future:
    // { label: "Favorites", action: () => {} },
    // { label: "Manage libraries…", action: () => {} },
  ] as const;

  return (
    <div className="mt-1 w-48 bg-white border border-gray-200 rounded-md shadow-lg">
      {items.map((item) => (
        <button
          key={item.label}
          onClick={() => {
            item.action();
            onSelect();
          }}
          className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
        >
          {item.label}
        </button>
      ))}
    </div>
  );
};

export default SoundLibraryMenu;

--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\WorkspaceNavBar.tsx
File type: .tsx
import React, { useState, useRef, useEffect } from "react";
import { ChevronLeft, ChevronRight, HelpCircle } from "lucide-react";

import FileMenu from "./FileMenu";
import EditMenu from "./EditMenu";
import SoundLibraryMenu from "./SoundLibraryMenu";
import SettingsMenu from "./SettingsMenu";
import MIDIToolsMenu from "./MIDIToolsMenu";
import SoundLibraryModal from "./SoundLibraryModal";
import { publish } from "./midi-editor/core/editorBus";

const TABS = ["File", "Edit", "Sound Library", "Settings", "MIDI Tools"] as const;
type Tab = typeof TABS[number];

type Props = {
  onNew: () => void;
  onOpen: () => void;
  onSave: () => void;
  onSaveAs: () => void;
  onImportMidi: (file: File) => void;
  onExportMidi: () => void;
  onExportStems: () => void;
  onClose: () => void;
};

const WorkspaceNavBar: React.FC<Props> = ({
  onNew,
  onOpen,
  onSave,
  onSaveAs,
  onImportMidi,
  onExportMidi,
  onExportStems,
  onClose,
}) => {
  const [openDropdown, setOpenDropdown] = useState<Tab | null>(null);
  const [libraryOpen, setLibraryOpen] = useState(false);
  const ref = useRef<HTMLDivElement>(null);

  // Close dropdowns on outside click
  useEffect(() => {
    const onClickOutside = (e: MouseEvent) => {
      if (ref.current && !ref.current.contains(e.target as Node)) {
        setOpenDropdown(null);
      }
    };
    document.addEventListener("mousedown", onClickOutside);
    return () => document.removeEventListener("mousedown", onClickOutside);
  }, []);

  const toggle = (tab: Tab) => {
    setOpenDropdown((prev) => (prev === tab ? null : tab));
  };

  return (
    <div ref={ref} className="relative bg-white shadow-sm">
      {/* Top row */}
      <div className="flex items-center justify-between px-6 h-12">
        <div className="flex items-center gap-4">
          {/* Nav history */}
          <button className="p-1 hover:bg-gray-100 rounded" onClick={() => window.history.back()}>
            <ChevronLeft size={20} />
          </button>
          <button className="p-1 hover:bg-gray-100 rounded" onClick={() => window.history.forward()}>
            <ChevronRight size={20} />
          </button>

          {/* Tabs */}
          <nav className="flex gap-6 ml-4">
            {TABS.map((tab) => (
              <div key={tab} className="relative">
                <button
                  onClick={() => toggle(tab)}
                  className={`pb-[10px] text-sm ${
                    openDropdown === tab
                      ? "border-b-2 border-teal-500 font-medium"
                      : "text-gray-600 hover:text-black"
                  }`}
                >
                  {tab}
                </button>

                {/* File */}
                {openDropdown === "File" && tab === "File" && (
                  <div className="absolute left-0 top-full z-30">
                    <FileMenu
                      onSelect={() => setOpenDropdown(null)}
                      onNew={onNew}
                      onOpen={onOpen}
                      onSave={onSave}
                      onSaveAs={onSaveAs}
                      onImportMidi={onImportMidi}
                      onExportMidi={onExportMidi}
                      onExportStems={onExportStems}
                      onClose={onClose}
                    />
                  </div>
                )}

                {/* Edit */}
                {openDropdown === "Edit" && tab === "Edit" && (
                  <div className="absolute left-0 top-full z-30">
                    <EditMenu
                      onSelect={() => setOpenDropdown(null)}
                      onUndo={() => publish({ type: "UNDO" })}
                      onRedo={() => publish({ type: "REDO" })}
                      onCut={() => publish({ type: "CUT" })}
                      onCopy={() => publish({ type: "COPY" })}
                      onPaste={() => publish({ type: "PASTE" })}
                      onDelete={() => publish({ type: "DELETE" })}
                      onSelectAll={() => publish({ type: "SELECT_ALL" })}
                    />
                  </div>
                )}

                {/* Sound Library -> dropdown (opens modal on "Upload sound…") */}
                {openDropdown === "Sound Library" && tab === "Sound Library" && (
                  <div className="absolute left-0 top-full z-30">
                    <SoundLibraryMenu
                      onSelect={() => setOpenDropdown(null)}
                      onUploadSound={() => {
                        setOpenDropdown(null);
                        setLibraryOpen(true);
                      }}
                    />
                  </div>
                )}

                {/* Settings */}
                {openDropdown === "Settings" && tab === "Settings" && (
                  <div className="absolute left-0 top-full z-30">
                    <SettingsMenu
                      onSelect={() => setOpenDropdown(null)}
                      onKeyScaleLock={() => publish({ type: "OPEN_GRID_SETTINGS" })}
                      onAudioEngine={() => publish({ type: "OPEN_AUDIO_ENGINE" })}
                      onMidiInput={() => publish({ type: "OPEN_MIDI_INPUT" })}
                      onShortcuts={() => publish({ type: "OPEN_SHORTCUTS" })}
                      onGridSettings={() => publish({ type: "TOGGLE_SNAP" })}
                      onLatency={() => publish({ type: "OPEN_LATENCY_SETTINGS" })}
                    />
                  </div>
                )}

                {/* MIDI Tools */}
                {openDropdown === "MIDI Tools" && tab === "MIDI Tools" && (
                  <div className="absolute left-0 top-full z-30">
                    <MIDIToolsMenu
                      onSelect={() => setOpenDropdown(null)}
                      onTranspose={() => publish({ type: "TRANSPOSE" })}
                      onVelocity={() => publish({ type: "VELOCITY" })}
                      onNoteLength={() => publish({ type: "NOTE_LENGTH" })}
                      onHumanize={() => publish({ type: "HUMANIZE" })}
                      onArpeggiate={() => publish({ type: "ARPEGGIATE" })}
                      onStrum={() => publish({ type: "STRUM" })}
                      onLegato={() => publish({ type: "LEGATO" })}
                    />
                  </div>
                )}
              </div>
            ))}
          </nav>
        </div>

        {/* Help placeholder */}
        <button className="p-2 hover:bg-gray-100 rounded-full" onClick={() => setLibraryOpen(true)}>
          <HelpCircle size={20} />
        </button>
      </div>

      {/* Sound Library Modal (upload flow) */}
      <SoundLibraryModal
        isOpen={libraryOpen}
        onClose={() => setLibraryOpen(false)}
        onImportSample={onImportMidi}
      />
    </div>
  );
};

export default WorkspaceNavBar;


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\midi-editor\components\TrackDashboard\TrackDashboard.css
File type: .css
.dashboard-container {
  max-height: 600px;
  overflow-y: auto;
  border: 1px solid #ccc;
  padding: 10px;
  background: white;
}

.dashboard-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
}

.dashboard-timeline-wrapper {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.dashboard-track-row {
  border: 1px solid #ccc;
  padding: 10px;
  background: #fdfdfd;
}

.track-row-flex {
  display: flex;
  flex-direction: row;
  align-items: flex-start;
}

.track-controls {
  width: 200px;
}

.track-meta {
  margin-top: 5px;
}

.track-sliders {
  margin-top: 10px;
}

.track-timeline {
  position: relative;
  width: 640px;
  height: 200px;
  overflow: hidden;
  background: white;
  border: 1px solid #eee;
}

.timeline-cell {
  position: absolute;
  top: 0;
  bottom: 0;
  width: 10px;
  border-left: 1px solid #eee;
}

.timeline-cell.bar {
  border-left: 1px solid #999;
}

.mini-note {
  position: absolute;
  height: 5px;
  background: #4c79ff;
  border-radius: 2px;
}

.mini-playhead {
  position: absolute;
  width: 2px;
  height: 100%;
  background: red;
  z-index: 999;
}

.add-track-row {
  text-align: center;
  padding: 20px;
  font-size: 32px;
  cursor: pointer;
  color: #888;
  border: 2px dashed #ccc;
  margin-top: 10px;
}


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\midi-editor\components\TrackEditor\TrackEditor.tsx
File type: .tsx
import React, { useContext, useEffect, useRef, useState } from "react";
import PianoRoll from "../PianoRoll/PianoRoll";
import * as Tone from "tone";
import { exportMidi } from "../../core/exportMidi";
import { importMidiFile } from "../../core/importMidi";
import { getActiveNotesAtBeat } from "../../core/midiUtils";
import { TransportContext } from "../../core/TransportContext";
import { subscribe, EditorCommand } from "../../core/editorBus";
import { ChevronLeft, Upload, Music4, FileDown } from "lucide-react";

const MAX_BEAT = 63;
const BUILT_IN_INSTRUMENTS = ["Piano", "Synth", "AMSynth", "MembraneSynth"];

type Track = {
  id: string;
  name: string;
  notes: any[];
  instrument: string;
  customSoundUrl?: string;
};

type Props = {
  track: Track;
  updateTrack: (updates: Partial<Track>) => void;
  goBack: () => void;
};

const TrackEditor: React.FC<Props> = ({ track, updateTrack, goBack }) => {
  const { bpm, isPlaying, playheadBeat, setPlayheadBeat } =
    useContext(TransportContext);

  const [zoomLevel, setZoomLevel] = useState<1 | 2 | 4>(1);
  const [snapToGrid, setSnapToGrid] = useState(true);

  const playheadRef = useRef<HTMLDivElement>(null);
  const synthRef = useRef<any>(null);
  const redLineRef = useRef(playheadBeat);
  const animationRef = useRef<number>();
  const activeNotes = useRef<Set<string>>(new Set());

  const gridWidth = 40 * zoomLevel;

  // Audio-timing reference
  const audioStartTimeRef = useRef<number | null>(null);
  const beatAtStartRef = useRef<number>(0);

  // ---------- synth init by instrument ----------
  useEffect(() => {
    if (synthRef.current) synthRef.current.dispose?.();
    if (track.instrument.startsWith("Imported:")) {
      synthRef.current = null;
    } else {
      switch (track.instrument) {
        case "Piano":
          synthRef.current = new Tone.PolySynth().toDestination();
          break;
        case "Synth":
          synthRef.current = new Tone.Synth().toDestination();
          break;
        case "AMSynth":
          synthRef.current = new Tone.AMSynth().toDestination();
          break;
        case "MembraneSynth":
          synthRef.current = new Tone.MembraneSynth().toDestination();
          break;
        default:
          synthRef.current = new Tone.PolySynth().toDestination();
      }
    }
  }, [track.instrument]);

  // ---------- transport-driven animation ----------
  useEffect(() => {
    let lastTime = performance.now();

    const tick = (now: number) => {
      const delta = Math.max(now - lastTime, 0) / 1000;
      lastTime = now;

      if (isPlaying) {
        if (audioStartTimeRef.current === null) {
          audioStartTimeRef.current = Tone.now();
          beatAtStartRef.current = redLineRef.current;
        }
        const currentAudioTime = Tone.now();
        const elapsed = currentAudioTime - audioStartTimeRef.current;
        const beat = beatAtStartRef.current + (bpm / 60) * elapsed;

        redLineRef.current = beat;
        if (redLineRef.current >= MAX_BEAT) {
          redLineRef.current = 0;
          audioStartTimeRef.current = Tone.now();
          beatAtStartRef.current = 0;
          activeNotes.current.clear();
        }

        setPlayheadBeat(redLineRef.current);
        updatePlayhead(redLineRef.current);
        triggerNotesAt(redLineRef.current);
      } else {
        redLineRef.current = playheadBeat;
        updatePlayhead(playheadBeat);
        stopAllNotes();
        audioStartTimeRef.current = null;
      }

      animationRef.current = requestAnimationFrame(tick);
    };

    animationRef.current = requestAnimationFrame(tick);
    return () => cancelAnimationFrame(animationRef.current!);
  }, [isPlaying, bpm, playheadBeat, setPlayheadBeat]);

  // ---------- editorBus subscription ----------
  useEffect(() => {
    const unsub = subscribe(async (cmd: EditorCommand) => {
      switch (cmd.type) {
        case "SET_ZOOM":
          setZoomLevel(cmd.value);
          break;
        case "TOGGLE_SNAP":
          setSnapToGrid((s) => !s);
          break;
        case "EXPORT_MIDI":
          exportMidi(track.notes, bpm);
          break;
        case "IMPORT_MIDI_FILE": {
          const file = cmd.file;
          if (file) {
            const result = await importMidiFile(file);
            // If your import returns bpm, you can decide whether to update bpm via context elsewhere
            updateTrack({ notes: result.notes });
          }
          break;
        }

        // Tools — leave as stubs for now, or plug in your actual transforms:
        case "TRANSPOSE":
        case "VELOCITY":
        case "NOTE_LENGTH":
        case "HUMANIZE":
        case "ARPEGGIATE":
        case "STRUM":
        case "LEGATO":
        case "OPEN_AUDIO_ENGINE":
        case "OPEN_MIDI_INPUT":
        case "OPEN_SHORTCUTS":
        case "OPEN_GRID_SETTINGS":
        case "OPEN_LATENCY_SETTINGS":
        case "UNDO":
        case "REDO":
        case "CUT":
        case "COPY":
        case "PASTE":
        case "DELETE":
        case "SELECT_ALL":
          console.log("[editorBus] command received:", cmd.type);
          break;
      }
    });
    return unsub;
  }, [track.notes, bpm, updateTrack]);

  // ---------- note trigger helpers ----------
  const triggerNotesAt = (beat: number) => {
    const nowActive = getActiveNotesAtBeat(track.notes, beat);

    nowActive.forEach((note) => {
      if (!activeNotes.current.has(note.id)) {
        const now = Tone.now();
        if (track.instrument.startsWith("Imported:") && track.customSoundUrl) {
          const durationSec = (note.duration / bpm) * 60;
          const player = new Tone.Player({
            url: track.customSoundUrl,
            playbackRate: Math.pow(2, (note.pitch - 60) / 12),
            autostart: true,
            onstop: () => player.dispose(),
          }).toDestination();
          setTimeout(() => player.stop(), durationSec * 1000);
        } else {
          const name = Tone.Frequency(note.pitch, "midi").toNote();
          synthRef.current?.triggerAttack(name, now, note.velocity / 127);
        }
        activeNotes.current.add(note.id);
      }
    });

    activeNotes.current.forEach((id) => {
      const stillActive = nowActive.find((n) => n.id === id);
      if (!stillActive) {
        const note = track.notes.find((n) => n.id === id);
        if (note && !track.instrument.startsWith("Imported:")) {
          const name = Tone.Frequency(note.pitch, "midi").toNote();
          synthRef.current?.triggerRelease(name, Tone.now());
        }
        activeNotes.current.delete(id);
      }
    });
  };

  const stopAllNotes = () => {
    activeNotes.current.forEach((id) => {
      const note = track.notes.find((n) => n.id === id);
      if (note && !track.instrument.startsWith("Imported:")) {
        const name = Tone.Frequency(note.pitch, "midi").toNote();
        synthRef.current?.triggerRelease(name, Tone.now());
      }
    });
    activeNotes.current.clear();
  };

  const updatePlayhead = (beat: number) => {
    const left = beat * gridWidth;
    if (playheadRef.current) {
      playheadRef.current.style.left = `${left}px`;
    }
  };

  const scrubToBeat = (beat: number) => {
    redLineRef.current = beat;
    setPlayheadBeat(beat);
    updatePlayhead(beat);
  };

  // ---------- UI helpers that remain local ----------
  const handleUploadSound = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const url = URL.createObjectURL(file);
      const name = `Imported: ${file.name}`;
      updateTrack({ instrument: name, customSoundUrl: url });
    }
  };

  const testImportedSound = async () => {
    if (!track.instrument.startsWith("Imported:") || !track.customSoundUrl) return;
    const player = new Tone.Player(track.customSoundUrl).toDestination();
    await Tone.start();
    player.autostart = true;
  };

  return (
    <div style={{ padding: 10, overflowY: "auto" }}>
      <div className="px-4 py-3 space-y-4">
  {/* Header */}
  <div className="flex items-center justify-between">
    <button
      onClick={goBack}
      className="inline-flex items-center gap-2 px-3 py-1.5 rounded-lg border hover:bg-gray-50"
    >
      <ChevronLeft className="w-4 h-4" />
      <span>Back to Tracks</span>
    </button>

    <h2 className="text-xl font-semibold truncate">{track.name}</h2>
  </div>

  {/* Toolbar */}
  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3">
    {/* Zoom */}
    <div className="flex items-center gap-2">
      <span className="text-sm font-medium">Zoom:</span>
      <select
        value={zoomLevel}
        onChange={(e) => setZoomLevel(Number(e.target.value) as 1 | 2 | 4)}
        className="px-2 py-1 border rounded-md text-sm"
      >
        <option value={1}>1/4</option>
        <option value={2}>1/8</option>
        <option value={4}>1/16</option>
      </select>
      <label className="ml-3 inline-flex items-center gap-2 text-sm">
        <input
          type="checkbox"
          className="accent-teal-500"
          checked={snapToGrid}
          onChange={(e) => setSnapToGrid(e.target.checked)}
        />
        Snap to Grid
      </label>
    </div>

    {/* Instrument */}
    <div className="flex flex-wrap items-center gap-2">
      <span className="text-sm font-medium">Instrument:</span>
      <div className="flex items-center gap-2">
        <Music4 className="w-4 h-4 text-gray-500" />
        <select
          value={track.instrument}
          onChange={(e) => updateTrack({ instrument: e.target.value })}
          className="px-2 py-1 border rounded-md text-sm"
        >
          {BUILT_IN_INSTRUMENTS.map((inst) => (
            <option key={inst} value={inst}>
              {inst}
            </option>
          ))}
          {track.customSoundUrl && (
            <option value={track.instrument}>{track.instrument}</option>
          )}
        </select>
      </div>

      
    </div>

    {/* MIDI Import */}
    

    {/* MIDI Export */}
    <div className="flex items-center gap-2">
      <button
        onClick={() => exportMidi(track.notes, bpm)}
        className="inline-flex items-center gap-2 px-3 py-1.5 rounded-md border hover:bg-gray-50 text-sm"
      >
        <FileDown className="w-4 h-4" />
        Export MIDI
      </button>
    </div>
  </div>
</div>

      <PianoRoll
        notes={track.notes}
        setNotes={(updated) => updateTrack({ notes: updated })}
        playheadRef={playheadRef}
        gridWidth={gridWidth}
        snapToGrid={snapToGrid}
        isPlaying={isPlaying}
        onPlayheadScrub={scrubToBeat}
      />
    </div>
  );
};

export default TrackEditor;


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\midi-editor\components\TransportBar\GlobalTransportBar.css
File type: .css
.transport-bar {
    display: flex;
    align-items: center;
    justify-content: center;
    background: white;
    padding: 8px 16px;
    border: 2px solid black;
    border-radius: 12px;
    gap: 10px;
  }
  
  .transport-bar button {
    font-size: 18px;
    background: none;
    border: none;
    cursor: pointer;
  }
  
  .transport-bar button:hover {
    transform: scale(1.1);
  }
  
  .transport-bar input[type="range"] {
    width: 100px;
  }
  
  

--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\midi-editor\core\exportMidi.ts
File type: .ts
// src/components/workspace/midi-editor/core/exportMidi.ts
import { Midi } from "@tonejs/midi";

/**
 * Export a single track's notes to a downloadable .mid file.
 */
export function exportTrackToMidi(
  opts: {
    notes: Array<{ midi: number; time: number; duration: number; velocity?: number }>;
    bpm?: number;
    filename?: string;
  }
) {
  const { notes, bpm = 120, filename = "track" } = opts;

  const midi = new Midi();
  midi.header.ppq = 480;
  midi.header.setTempo(bpm);

  const track = midi.addTrack();
  notes.forEach(n => {
    track.addNote({
      midi: n.midi,
      time: n.time,
      duration: n.duration,
      velocity: n.velocity ?? 0.8,
    });
  });

  const bytes = midi.toArray();
  const blob = new Blob([bytes], { type: "audio/midi" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = `${filename}.mid`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

/**
 * Export multiple tracks to a single multi‑track .mid file.
 */
export function exportMultiTrackToMidi(
  opts: {
    tracks: Array<{
      name?: string;
      notes: Array<{ midi: number; time: number; duration: number; velocity?: number }>;
    }>;
    bpm?: number;
    filename?: string;
  }
) {
  const { tracks, bpm = 120, filename = "project" } = opts;

  const midi = new Midi();
  midi.header.ppq = 480;
  midi.header.setTempo(bpm);

  tracks.forEach(t => {
    const tr = midi.addTrack();
    if (t.name) tr.name = t.name;
    t.notes.forEach(n => {
      tr.addNote({
        midi: n.midi,
        time: n.time,
        duration: n.duration,
        velocity: n.velocity ?? 0.8,
      });
    });
  });

  const bytes = midi.toArray();
  const blob = new Blob([bytes], { type: "audio/midi" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = `${filename}.mid`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

// Optional: maintain backward compatibility if other code imported `exportMidi`
export const exportMidi = exportTrackToMidi;


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\midi-editor\core\importMidi.ts
File type: .ts
import { Midi } from '@tonejs/midi';

export async function importMidiFile(file: File) {
  const arrayBuffer = await file.arrayBuffer();
  const midi = new Midi(arrayBuffer);

  const notes: any[] = [];

  midi.tracks.forEach(track => {
    track.notes.forEach(note => {
      notes.push({
        id: `${note.midi}-${note.time}`, // unique-ish ID
        pitch: note.midi,
        time: note.time,
        duration: note.duration,
        velocity: Math.round(note.velocity * 127)
      });
    });
  });

  return {
    bpm: midi.header.tempos?.[0]?.bpm || 120,
    notes
  };
}

--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\midi-editor\core\MidiEditorCore.tsx
File type: .tsx
// frontend/src/components/workspace/midi-editor/core/MidiEditorCore.tsx
import GlobalTransportBar from "../components/TransportBar/GlobalTransportBar";
import React, { useState, useEffect, forwardRef, useImperativeHandle, useRef } from "react";
import TrackDashboard from "../components/TrackDashboard/TrackDashboard";
import TrackEditor, { TrackEditorAPI } from "../components/TrackEditor/TrackEditor";
import { TransportProvider } from "../core/TransportContext";

export interface Track {
  id: string;
  name: string;
  notes: any[];
  instrument: string;
  customSoundUrl?: string;
}

interface MidiEditorCoreProps {
  projectId: number;
  bpm: number;
  initialTracks: Track[];
  /** fire when user edits bpm or tracks */
  onChange: (bpm: number, tracks: Track[]) => void;
  onSave?: () => void;
  showTransport?: boolean;
}

export type MidiEditorAPI = {
  // Edit
  undo(): void;
  redo(): void;
  cut(): void;
  copy(): void;
  paste(): void;
  deleteSelection(): void;
  selectAll(): void;
  // MIDI tools
  transpose(semitones: number): void;
  velocityScale(mult: number): void;
  noteLengthScale(mult: number): void;
  humanize(amountMs?: number, velAmt?: number): void;
  arpeggiate(pattern?: "up" | "down" | "updown" | "random"): void;
  strum(ms?: number): void;
  legato(): void;
};

const MidiEditorCore = forwardRef<MidiEditorAPI, MidiEditorCoreProps>(({
  projectId,
  bpm: initialBpm,
  initialTracks = [],
  onChange,
  onSave,
  showTransport = true,
}, ref) => {
  const [bpm, setBpm] = useState(initialBpm);
  const [tracks, setTracks] = useState<Track[]>(initialTracks);
  const [activeTrackId, setActiveTrackId] = useState<string | null>(null);

  useEffect(() => {
    setBpm(initialBpm);
    setTracks(initialTracks);
    setActiveTrackId(null);
  }, [projectId]);

  const editorRef = useRef<TrackEditorAPI | null>(null);

  // bubble changes
  const addNewTrack = () => {
    const id = `t-${Date.now()}`;
    const newTrack: Track = {
      id,
      name: `Track ${tracks.length + 1}`,
      instrument: "Piano",
      notes: [],
    };
    const next = [...tracks, newTrack];
    setTracks(next);
    onChange(bpm, next);
  };

  const updateTrack = (id: string, updates: Partial<Track>) => {
    const next = tracks.map(t => (t.id === id ? { ...t, ...updates } : t));
    setTracks(next);
    onChange(bpm, next);
  };

  const changeBpm = (newBpm: number) => {
    setBpm(newBpm);
    onChange(newBpm, tracks);
  };

  const activeTrack = tracks.find((t) => t.id === activeTrackId) || null;

  // Expose commands (no-ops when dashboard view is open)
  useImperativeHandle(ref, () => ({
    undo:            () => editorRef.current?.undo?.(),
    redo:            () => editorRef.current?.redo?.(),
    cut:             () => editorRef.current?.cut?.(),
    copy:            () => editorRef.current?.copy?.(),
    paste:           () => editorRef.current?.paste?.(),
    deleteSelection: () => editorRef.current?.deleteSelection?.(),
    selectAll:       () => editorRef.current?.selectAll?.(),
    transpose:       (n)  => editorRef.current?.transpose?.(n),
    velocityScale:   (m)  => editorRef.current?.velocityScale?.(m),
    noteLengthScale: (m)  => editorRef.current?.noteLengthScale?.(m),
    humanize:        (a, v) => editorRef.current?.humanize?.(a, v),
    arpeggiate:      (p)  => editorRef.current?.arpeggiate?.(p),
    strum:           (ms) => editorRef.current?.strum?.(ms),
    legato:          ()   => editorRef.current?.legato?.(),
  }), []);

  return (
    <TransportProvider>
      <div className="flex flex-col h-full bg-white rounded-lg shadow-lg overflow-hidden">
        <div className="flex-1 min-h-0 overflow-y-auto">
          {activeTrack ? (
            <TrackEditor
              ref={editorRef}
              track={activeTrack}
              updateTrack={(u) => updateTrack(activeTrack.id, u)}
              goBack={() => setActiveTrackId(null)}
            />
          ) : (
            <TrackDashboard
              tracks={tracks}
              onEditTrack={(id) => setActiveTrackId(id)}
              onAddTrack={addNewTrack}
              updateTrack={updateTrack}
            />
          )}
        </div>
        {showTransport && (
          <div className="px-6 py-3 border-t bg-gray-50">
            <GlobalTransportBar />
          </div>
        )}
      </div>
    </TransportProvider>
  );
});

export default MidiEditorCore;

--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\midi-editor\core\midiUtils.ts
File type: .ts
export const getActiveNotesAtBeat = (notes: any[], beat: number): any[] => {
  return notes.filter(note =>
    beat >= note.time && beat < note.time + note.duration
  );
};


--------------------------------------------------
File End
--------------------------------------------------


src\components\workspace\midi-editor\core\TransportContext.tsx
File type: .tsx
import React, { createContext, useEffect, useState } from 'react';
import * as Tone from 'tone';

export const TransportContext = createContext<any>(null);

export const TransportProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [bpm, setBpm] = useState(120);
  const [isPlaying, setIsPlaying] = useState(false);
  const [playheadBeat, setPlayheadBeat] = useState(0);
  const [metronome, setMetronome] = useState(false);
  const [loop, setLoop] = useState(false);
  const [zoom, setZoom] = useState(1);

  const handlePlay = async () => {
    await Tone.start();
    setIsPlaying(true);
  };

  const handlePause = () => {
    setIsPlaying(false);
  };

  const returnToStart = () => {
    setPlayheadBeat(0);
  };

  const toggleMetronome = () => {
    setMetronome((prev) => !prev);
  };

  useEffect(() => {
    let metronomeSynth: Tone.Synth | null = null;
    let intervalId: number | string | undefined;

    if (metronome && isPlaying) {
      metronomeSynth = new Tone.Synth({
        oscillator: { type: 'square' },
        envelope: { attack: 0.001, decay: 0.01, sustain: 0.1, release: 0.1 }
      }).toDestination();

      intervalId = Tone.Transport.scheduleRepeat((time) => {
        metronomeSynth?.triggerAttackRelease("C5", "8n", time);
      }, "4n");

      Tone.Transport.start();
    }

    return () => {
      if (intervalId !== undefined) {
        Tone.Transport.clear(intervalId);
      }
      metronomeSynth?.dispose();
    };
  }, [metronome, isPlaying]);

  return (
    <TransportContext.Provider
      value={{
        bpm,
        setBpm,
        isPlaying,
        handlePlay,
        handlePause,
        returnToStart,
        playheadBeat,
        setPlayheadBeat,
        metronome,
        toggleMetronome,
        loop,
        toggleLoop: () => setLoop((prev) => !prev),
        zoom,
        handleZoomIn: () => setZoom((z) => Math.min(z + 1, 4)),
        handleZoomOut: () => setZoom((z) => Math.max(z - 1, 1)),
      }}
    >
      {children}
    </TransportContext.Provider>
  );
};


--------------------------------------------------
File End
--------------------------------------------------


src\config\apiConfig.ts
File type: .ts


--------------------------------------------------
File End
--------------------------------------------------


src\config\appConfig.ts
File type: .ts


--------------------------------------------------
File End
--------------------------------------------------


src\context\authStore.ts
File type: .ts


--------------------------------------------------
File End
--------------------------------------------------


src\context\midiStore.ts
File type: .ts
import { create } from 'zustand';

export type MIDINote = {
  track: number;
  time: number;
  pitch: string;
  duration: number;
};

type MIDIState = {
  notes: MIDINote[];
  addNote: (note: MIDINote) => void;
  removeNote: (track: number, time: number) => void;
  clearNotes: () => void;
};

export const useMIDIStore = create<MIDIState>((set) => ({
  notes: [],
  addNote: (note) =>
    set((state) => ({
      notes: [...state.notes, note],
    })),
  removeNote: (track, time) =>
    set((state) => ({
      notes: state.notes.filter((n) => !(n.track === track && n.time === time)),
    })),
  clearNotes: () => set({ notes: [] }),
}));

--------------------------------------------------
File End
--------------------------------------------------


src\hooks\useAuth.ts
File type: .ts
import { useState, useEffect } from 'react';
import * as authService from '../services/authService';

interface TokenResponse {
  access_token: string;
  token_type: string;
}

export const useAuth = () => {
  const [token, setToken] = useState<string | null>(() => localStorage.getItem('token'));
  const [user, setUser] = useState<any>(null); // later replace with User type if needed

  useEffect(() => {
    const storedToken = localStorage.getItem('token');
    if (storedToken && !token) {
      setToken(storedToken);
      // optionally: fetch user info here
    }
  }, []);

  const saveToken = (token: string) => {
    localStorage.setItem('token', token);
    setToken(token);
  };

  const register = async (username: string, password: string): Promise<void> => {
    const data: TokenResponse = await authService.register(username, password);
    saveToken(data.access_token);
  };

  const login = async (username: string, password: string): Promise<void> => {
    const data: TokenResponse = await authService.login(username, password);
    saveToken(data.access_token);
  };

  const logout = () => {
    localStorage.removeItem('token');
    setToken(null);
    setUser(null);
  };

  const isLoggedIn = !!token;

  return { token, user, isLoggedIn, login, register, logout };
};


--------------------------------------------------
File End
--------------------------------------------------


src\hooks\useMIDI.ts
File type: .ts


--------------------------------------------------
File End
--------------------------------------------------


src\pages\AuthPage.tsx
File type: .tsx
import React, { useState } from "react";
import LoginForm from "../components/auth/LoginForm";
import SignUpForm from "../components/auth/SignUpForm";
import AuthToggle from "../components/auth/AuthToggle";

const AuthPage = () => {
  const [isLogin, setIsLogin] = useState(true);

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100">
      <div className="bg-white p-6 rounded shadow-md w-96">
        <AuthToggle isLogin={isLogin} setIsLogin={setIsLogin} />
        {isLogin ? <LoginForm /> : <SignUpForm />}
      </div>
    </div>
  );
};

export default AuthPage;

--------------------------------------------------
File End
--------------------------------------------------


src\pages\DashboardPage.tsx
File type: .tsx
import React, { useState, useMemo } from "react";
import SortTabs, { SortKey } from "../components/dashboard/SortTabs";
import SearchBar from "../components/dashboard/SearchBar";
import UserDropdown from "../components/dashboard/UserDropdown";
import FolderStructure from "../components/dashboard/FolderStructure";
import NewProjectButton from "../components/dashboard/NewProjectButton";
import NewFolderButton from "../components/dashboard/NewFolderButton";
import { useProjects } from "../hooks/useProjects";

const DashboardPage: React.FC = () => {
  const { projects = [], folders = [], loading, error } = useProjects();

  const [sortOption, setSortOption] = useState<SortKey>("custom");
  const [searchTerm, setSearchTerm] = useState("");

  const sortedProjects = useMemo(() => {
    let copy = projects.slice();

    // filter
    if (searchTerm) {
      const q = searchTerm.toLowerCase();
      copy = copy.filter((p) => p.name.toLowerCase().includes(q));
    }

    // sort
    switch (sortOption) {
      case "created":
        return copy.sort(
          (a, b) =>
            new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
        );
      case "custom":
        return copy.sort((a, b) => a.name.localeCompare(b.name));
      case "modified":
        return copy.sort(
          (a, b) =>
            new Date(b.modified_at!).getTime() - new Date(a.modified_at!).getTime()
        );
      default:
        return copy;
    }
  }, [projects, sortOption, searchTerm]);

  return (
    <div className="flex flex-col h-screen bg-gray-50">
      {/* Top Bar */}
      <div className="flex items-center justify-between px-8 py-4 bg-white shadow">
        <div className="flex items-center space-x-6">
          <SortTabs selected={sortOption} onSelect={setSortOption} />
          <button className="p-2 rounded-full hover:bg-gray-100">
            {/* Hamburger icon */}
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="w-6 h-6 text-gray-600"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
        </div>

        <div className="flex-1 px-8">
          <SearchBar value={searchTerm} onChange={setSearchTerm} />
        </div>


        <UserDropdown />
      </div>

      {/* Main Panel */}
      <div className="flex-1 px-8 py-6 overflow-y-auto">
        <div className="p-6 bg-white rounded-2xl shadow-lg">
          {loading && <p className="text-gray-500 text-center">Loading projects…</p>}
          {error && <p className="text-red-500 text-center">{error}</p>}

          <FolderStructure projects={sortedProjects} folders={folders} />
        </div>
      </div>

      {/* Bottom CTAs */}
      <div className="flex justify-center items-center px-8 py-6 bg-white shadow">
        <NewProjectButton />
        <NewFolderButton />
      </div>
    </div>
  );
};

export default DashboardPage;


--------------------------------------------------
File End
--------------------------------------------------


src\pages\HomePage.tsx
File type: .tsx
import React from "react";
import FeatureList from "../components/home/FeatureList";
import StepGuide from "../components/home/StepGuide";
import UserTypes from "../components/home/UserTypes";
import Footer from "../components/home/Footer";
import HeroSection from "../components/home/HeroSection";

const HomePage: React.FC = () => {
  return (
    <div className="min-h-screen bg-[#fbf5ee]">
      <HeroSection />
      <FeatureList />
      <StepGuide />
      <UserTypes />
      <Footer />
    </div>
  );
};

export default HomePage;


--------------------------------------------------
File End
--------------------------------------------------


src\services\aiService.ts
File type: .ts
// frontend/src/services/aiService.ts
import axios from "axios";

const AI_API_URL = "http://localhost:8000/ai";

const getAuthHeader = () => {
  const token = localStorage.getItem("token");
  return { headers: { Authorization: `Bearer ${token}` } };
};

export type AIMode =
  | "suggest"
  | "generate"
  | "modify-suggest"
  | "modify"
  | "style-suggest"
  | "style";

export interface AIGenerateRequest {
  prompt: string;
  mode?: AIMode;             // <- optional (backend supports it)
  length_beats?: number;
  temperature?: number;
}

export interface AIGenerateResponse {
  suggestions?: string[];
  data?: any;                // project-shaped { bpm, tracks: [...] }
  midi?: string;
}

export const postAIGenerate = async (
  body: AIGenerateRequest
): Promise<AIGenerateResponse> => {
  // FIX: remove duplicate /ai; endpoint is /ai/generate not /ai/ai/generate
  const res = await axios.post(`${AI_API_URL}/generate`, body, getAuthHeader());
  return res.data;
};


--------------------------------------------------
File End
--------------------------------------------------


src\services\authService.ts
File type: .ts
import axios from 'axios';

const API_URL = 'http://localhost:8000/auth';

export interface TokenResponse {
  access_token: string;
  token_type: string;
}

export const register = async (username: string, password: string): Promise<TokenResponse> => {
  const res = await axios.post<TokenResponse>(`${API_URL}/register`, { username, password });
  return res.data;
};

export const login = async (username: string, password: string): Promise<TokenResponse> => {
  const res = await axios.post<TokenResponse>(`${API_URL}/login`, { username, password });
  return res.data;
};


--------------------------------------------------
File End
--------------------------------------------------


src\services\midiService.ts
File type: .ts


--------------------------------------------------
File End
--------------------------------------------------


src\services\projectService.ts
File type: .ts
// frontend/src/services/projectService.ts
import axios from "axios";

const API_URL = "http://localhost:8000/projects";

const getAuthHeader = () => {
  const token = localStorage.getItem("token");
  return {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  };
};

export const getAllProjects = async () => {
  const res = await axios.get(API_URL + "/", getAuthHeader());
  return res.data; // array of projects
};

export const getProjectById = async (id: number) => {
  const res = await axios.get(`${API_URL}/${id}`, getAuthHeader());
  return res.data;
};

export const createProject = async (name: string, data: any) => {
  const res = await axios.post(
    `${API_URL}/`,
    { name, data },
    getAuthHeader()
  );
  return res.data;
};

export const updateProject = async (
  id: number,
  name: string,
  data: any
) => {
  const res = await axios.put(
    `${API_URL}/${id}`,
    { name, data },
    getAuthHeader()
  );
  return res.data;
};

export const deleteProject = async (id: number) => {
  const res = await axios.delete(`${API_URL}/${id}`, getAuthHeader());
  return res.data;
};


--------------------------------------------------
File End
--------------------------------------------------


src\services\userService.ts
File type: .ts


--------------------------------------------------
File End
--------------------------------------------------


src\styles\auth.module.css
File type: .css


--------------------------------------------------
File End
--------------------------------------------------


src\styles\dashboard.module.css
File type: .css


--------------------------------------------------
File End
--------------------------------------------------


src\styles\globals.css
File type: .css
@import "tailwindcss";

--------------------------------------------------
File End
--------------------------------------------------


src\styles\LoadingSpinner.css
File type: .css
.loading-spinner {
    border: 16px solid #f3f3f3;
    border-top: 16px solid #3498db;
    border-radius: 50%;
    width: 120px;
    height: 120px;
    animation: spin 2s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  

--------------------------------------------------
File End
--------------------------------------------------


src\styles\ToggleSwitch.css
File type: .css


--------------------------------------------------
File End
--------------------------------------------------


src\styles\workspace.module.css
File type: .css
.workspace-page {
  display: flex;
  flex-direction: column;
  height: 100vh;
}

.workspace-page > .fixed {
  position: sticky;
  top: 0;
  z-index: 10;
}

/* PianoRoll container gets full available height */
.piano-roll-container {
  height: calc(100% - 200px); /* adjust based on header/navbar height */
  overflow-y: auto;
}

/* Rounded panel & shadow for editor box */
.midi-editor-box {
  border-radius: 1rem;
  background: white;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

/* Rest of your Tailwind overrides… */

--------------------------------------------------
File End
--------------------------------------------------


src\types\projectTypes.ts
File type: .ts
export type Note = {
    id: string;
    pitch: number;
    time: number;
    duration: number;
    velocity: number;
  };
  
  export type Track = {
    id: string;
    name: string;
    notes: Note[];
    instrument: string;
    customSoundUrl?: string;
  };
  
  export type Project = {
    id: string;
    name: string;
    tracks: Track[];
    createdAt: string;
    updatedAt: string;
  };
  

--------------------------------------------------
File End
--------------------------------------------------


src\utils\constants.ts
File type: .ts


--------------------------------------------------
File End
--------------------------------------------------


src\utils\exportProject.ts
File type: .ts
import { Midi } from "@tonejs/midi";

/**
 * @param jsonData  A JSON string like `{"notes":[…],"bpm":120}`
 * @param filename  The base name (no extension) for the download
 */
export function exportProject(jsonData: string, filename: string) {
  // parse your stored data
  const { notes, bpm } = JSON.parse(jsonData) as {
    notes: Array<{
      midi: number;
      time: number;
      duration: number;
      velocity: number;
    }>;
    bpm: number;
  };

  // build a ToneJS Midi object
  const midi = new Midi();
  midi.header.ppq = 480;
  midi.header.setTempo(bpm);

  const track = midi.addTrack();
  notes.forEach((note) =>
    track.addNote({
      midi: note.midi,
      time: note.time,
      duration: note.duration,
      velocity: note.velocity,
    })
  );

  // serialize to ArrayBuffer and download
  const bytes = midi.toArray();
  const blob = new Blob([bytes], { type: "audio/midi" });
  const url = URL.createObjectURL(blob);

  const a = document.createElement("a");
  a.href = url;
  a.download = `${filename}.mid`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}


--------------------------------------------------
File End
--------------------------------------------------


src\utils\formatDate.ts
File type: .ts


--------------------------------------------------
File End
--------------------------------------------------


src\utils\generateMIDI.ts
File type: .ts
import { Midi } from '@tonejs/midi';
import * as Tone from 'tone';
import { MIDINote } from '../context/midiStore';

export const generateMIDI = (notes: MIDINote[]) => {
  const midi = new Midi();
  const track = midi.addTrack();

  notes.forEach((note) => {
    track.addNote({
      midi: Tone.Frequency(note.pitch).toMidi(),
      time: note.time * Tone.Time('16n').toSeconds(),
      duration: Tone.Time('16n').toSeconds(),
    });
  });

  const blob = new Blob([midi.toArray()], { type: 'audio/midi' });
  const url = URL.createObjectURL(blob);
  return url;
};

--------------------------------------------------
File End
--------------------------------------------------


src\utils\instruments.ts
File type: .ts
import * as Tone from 'tone';

export const getInstrument = (type: string) => {
  switch (type) {
    case 'keyboard':
      return new Tone.Synth().toDestination();
    case 'drums':
      return new Tone.MembraneSynth().toDestination();
    case 'bass':
      return new Tone.MonoSynth().toDestination();
    default:
      return new Tone.Synth().toDestination();
  }
};

--------------------------------------------------
File End
--------------------------------------------------


src\utils\validateForm.ts
File type: .ts


--------------------------------------------------
File End
--------------------------------------------------
