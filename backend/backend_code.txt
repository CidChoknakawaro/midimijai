Folder Structure
--------------------------------------------------
app/
    database.py
    main.py
    middleware.py
    core/
        config.py
        security.py
    models/
        midi.py
        project.py
        user.py
    routers/
        ai.py
        auth.py
        midi.py
        project.py
        users.py
    schemas/
        ai.py
        midi.py
        project.py
        user.py
    services/
        ai_service.py


File Contents
--------------------------------------------------


app\database.py
File type: .py
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from app.core.config import settings

SQLALCHEMY_DATABASE_URL = settings.DATABASE_URL

engine = create_engine(
    SQLALCHEMY_DATABASE_URL,
    connect_args={"check_same_thread": False} if "sqlite" in SQLALCHEMY_DATABASE_URL else {}
)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def create_db_and_tables():
    Base.metadata.create_all(bind=engine)


--------------------------------------------------
File End
--------------------------------------------------


app\main.py
File type: .py
# backend/app/main.py

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from app.database import create_db_and_tables

# Explicit router imports:
from app.routers.auth    import router as auth_router
from app.routers.users   import router as users_router
from app.routers.midi    import router as midi_router
from app.routers.project import router as projects_router
from app.routers.ai      import router as ai_router

app = FastAPI()

# Allow frontend access during dev
origins = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mount all routers
app.include_router(auth_router,     prefix="/auth",     tags=["auth"])
app.include_router(users_router,    prefix="/users",    tags=["users"])
app.include_router(midi_router,     prefix="/midi",     tags=["midi"])
app.include_router(projects_router, prefix="/projects", tags=["projects"])
app.include_router(ai_router,       prefix="/ai",       tags=["ai"])

# Initialize tables on startup (or use Alembic migrations instead)
@app.on_event("startup")
def on_startup():
    create_db_and_tables()

@app.get("/")
def root():
    return {"message": "MIDIMIJAI backend is running"}


--------------------------------------------------
File End
--------------------------------------------------


app\middleware.py
File type: .py
# Add later

--------------------------------------------------
File End
--------------------------------------------------


app\core\config.py
File type: .py
from pydantic_settings import BaseSettings

class Settings(BaseSettings):
    DATABASE_URL: str = "sqlite:///./midimijai.db"
    JWT_SECRET_KEY: str = "super-secret-key"
    JWT_ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60

    class Config:
        env_file = ".env"
        extra = "allow" 
        
settings = Settings()


--------------------------------------------------
File End
--------------------------------------------------


app\core\security.py
File type: .py
from passlib.context import CryptContext
from jose import JWTError, jwt
from datetime import datetime, timedelta
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from sqlalchemy.orm import Session
from app.core.config import settings
from app.models.user import User
from app.database import get_db

# --- Password Hashing ---
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def hash_password(password: str) -> str:
    return pwd_context.hash(password)

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)

# --- Token Creation ---
def create_access_token(data: dict, expires_delta: timedelta = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, settings.JWT_SECRET_KEY, algorithm=settings.JWT_ALGORITHM)

# --- Token Decoding + User Resolution ---
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/login")

def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)) -> User:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, settings.JWT_SECRET_KEY, algorithms=[settings.JWT_ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception

    user = db.query(User).filter(User.username == username).first()
    if user is None:
        raise credentials_exception
    return user


--------------------------------------------------
File End
--------------------------------------------------


app\models\midi.py
File type: .py
from sqlalchemy import Column, Integer, String, ForeignKey, JSON
from sqlalchemy.orm import relationship
from app.database import Base

class MIDIProject(Base):
    __tablename__ = "midi_projects"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    data = Column(JSON)
    user_id = Column(Integer, ForeignKey("users.id"))

    owner = relationship("User", back_populates="midi_projects")


--------------------------------------------------
File End
--------------------------------------------------


app\models\project.py
File type: .py
from sqlalchemy import Column, Integer, String, DateTime, ForeignKey, JSON
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from app.database import Base

class Project(Base):
    __tablename__ = "projects"

    id = Column(Integer, primary_key=True, index=True)
    owner_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    name = Column(String, nullable=False)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(
        DateTime(timezone=True),
        server_default=func.now(),
        onupdate=func.now()
    )
    data = Column(JSON, nullable=False)  
    # "data" will store { "bpm":120, "tracks":[ {id, name, instrument, notes: [...]}, ... ] }

    owner = relationship("User", back_populates="projects")

--------------------------------------------------
File End
--------------------------------------------------


app\models\user.py
File type: .py
from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import relationship
from app.database import Base

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    hashed_password = Column(String)

    midi_projects = relationship("MIDIProject", back_populates="owner", cascade="all, delete")

    projects = relationship("Project", back_populates="owner", cascade="all, delete")

--------------------------------------------------
File End
--------------------------------------------------


app\routers\ai.py
File type: .py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import Any, Optional

from app.database import get_db
from app.core.security import get_current_user
from app.schemas.ai import AIGenerateRequest, AIGenerateResponse
from app.services.ai_service import (
    generate_midi_from_prompt,
    suggest_from_prompt,
    modify_from_prompt,
    style_from_prompt,
)

router = APIRouter(tags=["ai"])

@router.post(
    "/generate",
    response_model=AIGenerateResponse,
    dependencies=[Depends(get_current_user)]
)
def ai_generate(
    payload: AIGenerateRequest,
    db: Session = Depends(get_db),
) -> Any:
    try:
        mode: Optional[str] = payload.mode
        if mode in (None, "generate"):
            data = generate_midi_from_prompt(
                prompt=payload.prompt,
                length_beats=payload.length_beats,
                temperature=payload.temperature
            )
            return {"data": data}
        elif mode == "suggest":
            return {"suggestions": suggest_from_prompt(payload.prompt)}
        elif mode == "modify":
            return {"data": modify_from_prompt(payload.prompt)}
        elif mode == "modify-suggest":
            return {"suggestions": suggest_from_prompt(payload.prompt)}
        elif mode == "style":
            return {"data": style_from_prompt(payload.prompt)}
        elif mode == "style-suggest":
            return {"suggestions": suggest_from_prompt(payload.prompt)}
        else:
            raise HTTPException(400, detail="Unsupported mode")
    except Exception as e:
        raise HTTPException(500, detail=str(e))


--------------------------------------------------
File End
--------------------------------------------------


app\routers\auth.py
File type: .py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app.schemas.user import UserCreate, Token
from app.models.user import User
from app.core.security import hash_password, verify_password, create_access_token
from app.database import get_db

router = APIRouter()

@router.post("/register", response_model=Token)
def register(user: UserCreate, db: Session = Depends(get_db)):
    existing = db.query(User).filter(User.username == user.username).first()
    if existing:
        raise HTTPException(status_code=400, detail="Username already registered")
    hashed_pw = hash_password(user.password)
    db_user = User(username=user.username, hashed_password=hashed_pw)
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    token = create_access_token(data={"sub": db_user.username})
    return {"access_token": token, "token_type": "bearer"}

@router.post("/login", response_model=Token)
def login(user: UserCreate, db: Session = Depends(get_db)):
    db_user = db.query(User).filter(User.username == user.username).first()
    if not db_user or not verify_password(user.password, db_user.hashed_password):
        raise HTTPException(status_code=400, detail="Invalid credentials")
    token = create_access_token(data={"sub": db_user.username})
    return {"access_token": token, "token_type": "bearer"}


--------------------------------------------------
File End
--------------------------------------------------


app\routers\midi.py
File type: .py
from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session
from app.schemas.midi import MIDIProjectCreate, MIDIProjectOut
from app.models.midi import MIDIProject
from app.database import get_db

router = APIRouter()

@router.post("/", response_model=MIDIProjectOut)
def create_project(project: MIDIProjectCreate, db: Session = Depends(get_db)):
    db_project = MIDIProject(**project.dict())
    db.add(db_project)
    db.commit()
    db.refresh(db_project)
    return db_project

@router.get("/", response_model=list[MIDIProjectOut])
def get_projects(db: Session = Depends(get_db)):
    return db.query(MIDIProject).all()


--------------------------------------------------
File End
--------------------------------------------------


app\routers\project.py
File type: .py
from typing import List

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session

from app.database import get_db
from app.models.project import Project as ProjectModel
from app.schemas.project import ProjectCreate, ProjectUpdate, ProjectInDB
from app.core.security import get_current_user

router = APIRouter(
    tags=["projects"],
)


@router.get("/", response_model=List[ProjectInDB])
def list_projects(
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user),
):
    return (
        db.query(ProjectModel)
        .filter(ProjectModel.owner_id == current_user.id)
        .all()
    )


@router.post("/", response_model=ProjectInDB)
def create_project(
    payload: ProjectCreate,
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user),
):
    proj = ProjectModel(owner_id=current_user.id, **payload.dict())
    db.add(proj)
    db.commit()
    db.refresh(proj)
    return proj


@router.get("/{project_id}", response_model=ProjectInDB)
def get_project(
    project_id: int,
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user),
):
    proj = (
        db.query(ProjectModel)
        .filter(
            ProjectModel.id == project_id,
            ProjectModel.owner_id == current_user.id,
        )
        .first()
    )
    if not proj:
        raise HTTPException(status_code=404, detail="Project not found")
    return proj


@router.put("/{project_id}", response_model=ProjectInDB)
def update_project(
    project_id: int,
    payload: ProjectUpdate,
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user),
):
    q = (
        db.query(ProjectModel)
        .filter(
            ProjectModel.id == project_id,
            ProjectModel.owner_id == current_user.id,
        )
    )
    if not q.first():
        raise HTTPException(status_code=404, detail="Project not found")
    q.update(payload.dict(exclude_none=True))
    db.commit()
    return q.first()


@router.delete("/{project_id}")
def delete_project(
    project_id: int,
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user),
):
    q = (
        db.query(ProjectModel)
        .filter(
            ProjectModel.id == project_id,
            ProjectModel.owner_id == current_user.id,
        )
    )
    if not q.first():
        raise HTTPException(status_code=404, detail="Project not found")
    q.delete()
    db.commit()
    return {"ok": True}

--------------------------------------------------
File End
--------------------------------------------------


app\routers\users.py
File type: .py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app.database import get_db
from app.models.user import User
from app.schemas.user import UserOut

router = APIRouter()

@router.get("/{user_id}", response_model=UserOut)
def get_user(user_id: int, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user


--------------------------------------------------
File End
--------------------------------------------------


app\schemas\ai.py
File type: .py
from pydantic import BaseModel
from typing import Optional, Dict, Any, Literal

AIMode = Literal[
    "suggest",
    "generate",
    "modify-suggest",
    "modify",
    "style-suggest",
    "style",
]

class AIGenerateRequest(BaseModel):
    prompt: str
    mode: Optional[AIMode] = None
    length_beats: Optional[int] = 64
    temperature: Optional[float] = 1.0

class AIGenerateResponse(BaseModel):
    # either suggestions or data (project-shaped)
    suggestions: Optional[list[str]] = None
    data: Optional[Dict[str, Any]] = None


--------------------------------------------------
File End
--------------------------------------------------


app\schemas\midi.py
File type: .py
from pydantic import BaseModel

class MIDIProjectCreate(BaseModel):
    name: str
    data: dict
    user_id: int

class MIDIProjectOut(MIDIProjectCreate):
    id: int

    class Config:
        orm_mode = True


--------------------------------------------------
File End
--------------------------------------------------


app\schemas\project.py
File type: .py
from datetime import datetime
from pydantic import BaseModel
from typing import List, Any, Optional

class TrackSchema(BaseModel):
    id: str
    name: str
    instrument: str
    notes: List[Any]  # you can make this more specific

class ProjectBase(BaseModel):
    name: str
    data: dict  # {"bpm": int, "tracks": List[TrackSchema]}

class ProjectCreate(ProjectBase):
    pass

class ProjectUpdate(BaseModel):
    name: Optional[str]
    data: Optional[dict]

class ProjectInDB(ProjectBase):
    id: int
    owner_id: int
    created_at: datetime
    updated_at: datetime

    class Config:
        orm_mode = True


--------------------------------------------------
File End
--------------------------------------------------


app\schemas\user.py
File type: .py
from pydantic import BaseModel

class UserCreate(BaseModel):
    username: str
    password: str

class UserOut(BaseModel):
    id: int
    username: str

    class Config:
        orm_mode = True

class Token(BaseModel):
    access_token: str
    token_type: str


--------------------------------------------------
File End
--------------------------------------------------


app\services\ai_service.py
File type: .py
from typing import Dict, Any, List

def _empty_project(name: str = "AI Track") -> Dict[str, Any]:
    return {
        "bpm": 120,
        "tracks": [
            {
                "id": "ai1",
                "name": name,
                "instrument": "Piano",
                "notes": []
            }
        ]
    }

def generate_midi_from_prompt(
    prompt: str,
    length_beats: int = 64,
    temperature: float = 1.0
) -> Dict[str, Any]:
    # TODO: integrate real model
    return _empty_project("Generated Track")

def suggest_from_prompt(prompt: str) -> List[str]:
    # TODO: integrate LLM suggestions
    return [
        f"Try a {prompt} motif in 4 bars.",
        "Increase swing to 55%.",
        "Layer a second voice one octave above.",
    ]

def modify_from_prompt(prompt: str) -> Dict[str, Any]:
    # TODO: transform existing project with prompt
    return _empty_project("Modified Track")

def style_from_prompt(prompt: str) -> Dict[str, Any]:
    # TODO: apply style transfer
    return _empty_project(f"Style: {prompt}")


--------------------------------------------------
File End
--------------------------------------------------
